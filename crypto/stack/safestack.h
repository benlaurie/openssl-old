/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

#ifndef HEADER_SAFESTACK_H
#define HEADER_SAFESTACK_H

#include <openssl/stack.h>

#ifdef DEBUG_SAFESTACK

#define STACK_OF(type) struct stack_st_##type
#define PREDECLARE_STACK_OF(type) STACK_OF(type);

#define DECLARE_STACK_OF(type) \
STACK_OF(type) \
    { \
    STACK stack; \
    };

#define IMPLEMENT_STACK_OF(type) /* nada */

#define SKM_sk_new(type, a) \
	((STACK_OF(type) * (*)(int (*)(const type * const *, const type * const *)))sk_new)(a)
#define SKM_sk_new_null(type) \
	((STACK_OF(type) * (*)(void))sk_new_null)()
#define SKM_sk_free(type, a) \
	((void (*)(STACK_OF(type) *))sk_free)(a)
#define SKM_sk_num(type, a) \
	((int (*)(const STACK_OF(type) *))sk_num)(a)
#define SKM_sk_value(type, a, b) \
	((type * (*)(const STACK_OF(type) *, int))sk_value)(a, b)
#define SKM_sk_set(type, a, b, c) \
	((type * (*)(STACK_OF(type) *, int, type *))sk_set)(a,b,c)
#define SKM_sk_zero(type, a) \
	((void (*)(STACK_OF(type) *))sk_zero)(a)
#define SKM_sk_push(type, a, b) \
	((int (*)(STACK_OF(type) *, type *))sk_push)(a, b)
#define SKM_sk_unshift(type, a,b) \
	((int (*)(STACK_OF(type) *, type *))sk_unshift)(a, b)
#define SKM_sk_find(type, a, b) \
	((int (*)(STACK_OF(type) *, type *))sk_find)(a, b)
#define SKM_sk_delete(type, a,b) \
	((type * (*)(STACK_OF(type) *, int))sk_delete)(a, b)
#define SKM_sk_delete_ptr(type, a,b) \
	((type * (*)(STACK_OF(type) *, type *))sk_delete_ptr)(a, b)
#define SKM_sk_insert(type, a,b,c) \
	((int (*)(STACK_OF(type) *, type *, int))sk_insert)(a,b,c)
#define SKM_sk_set_cmp_func(type, a,b) \
	((int (*(*)(STACK_OF(type) *, int (*)(const type * const *, const type * const *))) \
				(const type * const *, const type * const *))sk_set_cmp_func)(a, b)
#define SKM_sk_dup(type, a) \
	((STACK_OF(type) *(*)(STACK_OF(type) *))sk_dup)(a)
#define SKM_sk_pop_free(type, a,b) \
	((void (*)(STACK_OF(type) *, void (*)(type *)))sk_pop_free)(a, b)
#define SKM_sk_shift(type, a) \
	((type * (*)(STACK_OF(type) *))sk_shift)(a)
#define SKM_sk_pop(type, a) \
	((type * (*)(STACK_OF(type) *))sk_pop)(a)
#define SKM_sk_sort(type, a) \
	((void (*)(STACK_OF(type) *))sk_sort)(a)

#else

#define STACK_OF(type) STACK
#define PREDECLARE_STACK_OF(type) /* nada */
#define DECLARE_STACK_OF(type)    /* nada */
#define IMPLEMENT_STACK_OF(type)  /* nada */

#define SKM_sk_new(stype, a) sk_new((int (*) \
	(const char * const *, const char * const *))(a))
#define SKM_sk_new_null(stype) sk_new_null()
#define SKM_sk_free(stype, a) sk_free(a)
#define SKM_sk_num(stype, a) sk_num(a)
#define SKM_sk_value(stype, a,b) ((stype *) \
	sk_value((a),(b)))
#define SKM_sk_set(stype, a,b,c) ((stype *) \
	sk_set((a),(b),(char *)(c)))
#define SKM_sk_zero(stype, a) sk_zero(a)
#define SKM_sk_push(stype, a,b) sk_push((a),(char *)(b))
#define SKM_sk_unshift(stype, a,b) sk_unshift((a),(b))
#define SKM_sk_find(stype, a,b) sk_find((a), (char *)(b))
#define SKM_sk_delete(stype, a,b) ((stype *) \
	sk_delete((a),(b)))
#define SKM_sk_delete_ptr(stype, a,b) ((stype *) \
	sk_delete_ptr((a),(char *)(b)))
#define SKM_sk_insert(stype, a,b,c) sk_insert((a),(char *)(b),(c))
#define SKM_sk_set_cmp_func(stype, a,b) ((int (*) \
		(const stype * const *,const stype * const *)) \
		sk_set_cmp_func((a),(int (*) \
		(const char * const *, const char * const *))(b)))
#define SKM_sk_dup(stype, a) sk_dup(a)
#define SKM_sk_pop_free(stype, a,b) sk_pop_free((a),(void (*)(void *))(b))
#define SKM_sk_shift(stype, a) ((stype *)sk_shift(a))
#define SKM_sk_pop(stype, a) ((stype *)sk_pop(a))
#define SKM_sk_sort(stype, a) sk_sort(a)

#endif

/* This block of defines is updated by a perl script, please do not touch! */
	#define sk_CRYPTO_EX_DATA_FUNCS_new(a) SKM_sk_new(CRYPTO_EX_DATA_FUNCS, (a))
	#define sk_CRYPTO_EX_DATA_FUNCS_new_null() SKM_sk_new_null(CRYPTO_EX_DATA_FUNCS)
	#define sk_CRYPTO_EX_DATA_FUNCS_free(a) SKM_sk_free(CRYPTO_EX_DATA_FUNCS, (a))
	#define sk_CRYPTO_EX_DATA_FUNCS_num(a) SKM_sk_num(CRYPTO_EX_DATA_FUNCS, (a))
	#define sk_CRYPTO_EX_DATA_FUNCS_value(a,b) SKM_sk_value(CRYPTO_EX_DATA_FUNCS, (a), (b))
	#define sk_CRYPTO_EX_DATA_FUNCS_set(a,b,c) SKM_sk_set(CRYPTO_EX_DATA_FUNCS, (a), (b), (c))
	#define sk_CRYPTO_EX_DATA_FUNCS_zero(a) SKM_sk_zero(CRYPTO_EX_DATA_FUNCS, (a))
	#define sk_CRYPTO_EX_DATA_FUNCS_push(a,b) SKM_sk_push(CRYPTO_EX_DATA_FUNCS, (a),(b))
	#define sk_CRYPTO_EX_DATA_FUNCS_unshift(a,b) SKM_sk_unshift(CRYPTO_EX_DATA_FUNCS, (a),(b))
	#define sk_CRYPTO_EX_DATA_FUNCS_find(a,b) SKM_sk_find(CRYPTO_EX_DATA_FUNCS, (a), (b))
	#define sk_CRYPTO_EX_DATA_FUNCS_delete(a,b) SKM_sk_delete(CRYPTO_EX_DATA_FUNCS, (a),(b))
	#define sk_CRYPTO_EX_DATA_FUNCS_delete_ptr(a,b) SKM_sk_delete_ptr(CRYPTO_EX_DATA_FUNCS, (a),(b))
	#define sk_CRYPTO_EX_DATA_FUNCS_insert(a,b,c) SKM_sk_insert(CRYPTO_EX_DATA_FUNCS, (a),(b),(c))
	#define sk_CRYPTO_EX_DATA_FUNCS_set_cmp_func(a,b) SKM_sk_set_cmp_func(CRYPTO_EX_DATA_FUNCS, (a),(b))
	#define sk_CRYPTO_EX_DATA_FUNCS_dup(a) SKM_sk_dup(CRYPTO_EX_DATA_FUNCS, a)
	#define sk_CRYPTO_EX_DATA_FUNCS_pop_free(a,b) SKM_sk_pop_free(CRYPTO_EX_DATA_FUNCS, (a),(b))
	#define sk_CRYPTO_EX_DATA_FUNCS_shift(a) SKM_sk_shift(CRYPTO_EX_DATA_FUNCS, (a))
	#define sk_CRYPTO_EX_DATA_FUNCS_pop(a) SKM_sk_pop(CRYPTO_EX_DATA_FUNCS, (a))
	#define sk_CRYPTO_EX_DATA_FUNCS_sort(a) SKM_sk_sort(CRYPTO_EX_DATA_FUNCS, (a))

	#define sk_ASN1_STRING_TABLE_new(a) SKM_sk_new(ASN1_STRING_TABLE, (a))
	#define sk_ASN1_STRING_TABLE_new_null() SKM_sk_new_null(ASN1_STRING_TABLE)
	#define sk_ASN1_STRING_TABLE_free(a) SKM_sk_free(ASN1_STRING_TABLE, (a))
	#define sk_ASN1_STRING_TABLE_num(a) SKM_sk_num(ASN1_STRING_TABLE, (a))
	#define sk_ASN1_STRING_TABLE_value(a,b) SKM_sk_value(ASN1_STRING_TABLE, (a), (b))
	#define sk_ASN1_STRING_TABLE_set(a,b,c) SKM_sk_set(ASN1_STRING_TABLE, (a), (b), (c))
	#define sk_ASN1_STRING_TABLE_zero(a) SKM_sk_zero(ASN1_STRING_TABLE, (a))
	#define sk_ASN1_STRING_TABLE_push(a,b) SKM_sk_push(ASN1_STRING_TABLE, (a),(b))
	#define sk_ASN1_STRING_TABLE_unshift(a,b) SKM_sk_unshift(ASN1_STRING_TABLE, (a),(b))
	#define sk_ASN1_STRING_TABLE_find(a,b) SKM_sk_find(ASN1_STRING_TABLE, (a), (b))
	#define sk_ASN1_STRING_TABLE_delete(a,b) SKM_sk_delete(ASN1_STRING_TABLE, (a),(b))
	#define sk_ASN1_STRING_TABLE_delete_ptr(a,b) SKM_sk_delete_ptr(ASN1_STRING_TABLE, (a),(b))
	#define sk_ASN1_STRING_TABLE_insert(a,b,c) SKM_sk_insert(ASN1_STRING_TABLE, (a),(b),(c))
	#define sk_ASN1_STRING_TABLE_set_cmp_func(a,b) SKM_sk_set_cmp_func(ASN1_STRING_TABLE, (a),(b))
	#define sk_ASN1_STRING_TABLE_dup(a) SKM_sk_dup(ASN1_STRING_TABLE, a)
	#define sk_ASN1_STRING_TABLE_pop_free(a,b) SKM_sk_pop_free(ASN1_STRING_TABLE, (a),(b))
	#define sk_ASN1_STRING_TABLE_shift(a) SKM_sk_shift(ASN1_STRING_TABLE, (a))
	#define sk_ASN1_STRING_TABLE_pop(a) SKM_sk_pop(ASN1_STRING_TABLE, (a))
	#define sk_ASN1_STRING_TABLE_sort(a) SKM_sk_sort(ASN1_STRING_TABLE, (a))

	#define sk_ASN1_INTEGER_new(a) SKM_sk_new(ASN1_INTEGER, (a))
	#define sk_ASN1_INTEGER_new_null() SKM_sk_new_null(ASN1_INTEGER)
	#define sk_ASN1_INTEGER_free(a) SKM_sk_free(ASN1_INTEGER, (a))
	#define sk_ASN1_INTEGER_num(a) SKM_sk_num(ASN1_INTEGER, (a))
	#define sk_ASN1_INTEGER_value(a,b) SKM_sk_value(ASN1_INTEGER, (a), (b))
	#define sk_ASN1_INTEGER_set(a,b,c) SKM_sk_set(ASN1_INTEGER, (a), (b), (c))
	#define sk_ASN1_INTEGER_zero(a) SKM_sk_zero(ASN1_INTEGER, (a))
	#define sk_ASN1_INTEGER_push(a,b) SKM_sk_push(ASN1_INTEGER, (a),(b))
	#define sk_ASN1_INTEGER_unshift(a,b) SKM_sk_unshift(ASN1_INTEGER, (a),(b))
	#define sk_ASN1_INTEGER_find(a,b) SKM_sk_find(ASN1_INTEGER, (a), (b))
	#define sk_ASN1_INTEGER_delete(a,b) SKM_sk_delete(ASN1_INTEGER, (a),(b))
	#define sk_ASN1_INTEGER_delete_ptr(a,b) SKM_sk_delete_ptr(ASN1_INTEGER, (a),(b))
	#define sk_ASN1_INTEGER_insert(a,b,c) SKM_sk_insert(ASN1_INTEGER, (a),(b),(c))
	#define sk_ASN1_INTEGER_set_cmp_func(a,b) SKM_sk_set_cmp_func(ASN1_INTEGER, (a),(b))
	#define sk_ASN1_INTEGER_dup(a) SKM_sk_dup(ASN1_INTEGER, a)
	#define sk_ASN1_INTEGER_pop_free(a,b) SKM_sk_pop_free(ASN1_INTEGER, (a),(b))
	#define sk_ASN1_INTEGER_shift(a) SKM_sk_shift(ASN1_INTEGER, (a))
	#define sk_ASN1_INTEGER_pop(a) SKM_sk_pop(ASN1_INTEGER, (a))
	#define sk_ASN1_INTEGER_sort(a) SKM_sk_sort(ASN1_INTEGER, (a))

	#define sk_ASN1_TYPE_new(a) SKM_sk_new(ASN1_TYPE, (a))
	#define sk_ASN1_TYPE_new_null() SKM_sk_new_null(ASN1_TYPE)
	#define sk_ASN1_TYPE_free(a) SKM_sk_free(ASN1_TYPE, (a))
	#define sk_ASN1_TYPE_num(a) SKM_sk_num(ASN1_TYPE, (a))
	#define sk_ASN1_TYPE_value(a,b) SKM_sk_value(ASN1_TYPE, (a), (b))
	#define sk_ASN1_TYPE_set(a,b,c) SKM_sk_set(ASN1_TYPE, (a), (b), (c))
	#define sk_ASN1_TYPE_zero(a) SKM_sk_zero(ASN1_TYPE, (a))
	#define sk_ASN1_TYPE_push(a,b) SKM_sk_push(ASN1_TYPE, (a),(b))
	#define sk_ASN1_TYPE_unshift(a,b) SKM_sk_unshift(ASN1_TYPE, (a),(b))
	#define sk_ASN1_TYPE_find(a,b) SKM_sk_find(ASN1_TYPE, (a), (b))
	#define sk_ASN1_TYPE_delete(a,b) SKM_sk_delete(ASN1_TYPE, (a),(b))
	#define sk_ASN1_TYPE_delete_ptr(a,b) SKM_sk_delete_ptr(ASN1_TYPE, (a),(b))
	#define sk_ASN1_TYPE_insert(a,b,c) SKM_sk_insert(ASN1_TYPE, (a),(b),(c))
	#define sk_ASN1_TYPE_set_cmp_func(a,b) SKM_sk_set_cmp_func(ASN1_TYPE, (a),(b))
	#define sk_ASN1_TYPE_dup(a) SKM_sk_dup(ASN1_TYPE, a)
	#define sk_ASN1_TYPE_pop_free(a,b) SKM_sk_pop_free(ASN1_TYPE, (a),(b))
	#define sk_ASN1_TYPE_shift(a) SKM_sk_shift(ASN1_TYPE, (a))
	#define sk_ASN1_TYPE_pop(a) SKM_sk_pop(ASN1_TYPE, (a))
	#define sk_ASN1_TYPE_sort(a) SKM_sk_sort(ASN1_TYPE, (a))

	#define sk_ASN1_OBJECT_new(a) SKM_sk_new(ASN1_OBJECT, (a))
	#define sk_ASN1_OBJECT_new_null() SKM_sk_new_null(ASN1_OBJECT)
	#define sk_ASN1_OBJECT_free(a) SKM_sk_free(ASN1_OBJECT, (a))
	#define sk_ASN1_OBJECT_num(a) SKM_sk_num(ASN1_OBJECT, (a))
	#define sk_ASN1_OBJECT_value(a,b) SKM_sk_value(ASN1_OBJECT, (a), (b))
	#define sk_ASN1_OBJECT_set(a,b,c) SKM_sk_set(ASN1_OBJECT, (a), (b), (c))
	#define sk_ASN1_OBJECT_zero(a) SKM_sk_zero(ASN1_OBJECT, (a))
	#define sk_ASN1_OBJECT_push(a,b) SKM_sk_push(ASN1_OBJECT, (a),(b))
	#define sk_ASN1_OBJECT_unshift(a,b) SKM_sk_unshift(ASN1_OBJECT, (a),(b))
	#define sk_ASN1_OBJECT_find(a,b) SKM_sk_find(ASN1_OBJECT, (a), (b))
	#define sk_ASN1_OBJECT_delete(a,b) SKM_sk_delete(ASN1_OBJECT, (a),(b))
	#define sk_ASN1_OBJECT_delete_ptr(a,b) SKM_sk_delete_ptr(ASN1_OBJECT, (a),(b))
	#define sk_ASN1_OBJECT_insert(a,b,c) SKM_sk_insert(ASN1_OBJECT, (a),(b),(c))
	#define sk_ASN1_OBJECT_set_cmp_func(a,b) SKM_sk_set_cmp_func(ASN1_OBJECT, (a),(b))
	#define sk_ASN1_OBJECT_dup(a) SKM_sk_dup(ASN1_OBJECT, a)
	#define sk_ASN1_OBJECT_pop_free(a,b) SKM_sk_pop_free(ASN1_OBJECT, (a),(b))
	#define sk_ASN1_OBJECT_shift(a) SKM_sk_shift(ASN1_OBJECT, (a))
	#define sk_ASN1_OBJECT_pop(a) SKM_sk_pop(ASN1_OBJECT, (a))
	#define sk_ASN1_OBJECT_sort(a) SKM_sk_sort(ASN1_OBJECT, (a))

	#define sk_BIO_new(a) SKM_sk_new(BIO, (a))
	#define sk_BIO_new_null() SKM_sk_new_null(BIO)
	#define sk_BIO_free(a) SKM_sk_free(BIO, (a))
	#define sk_BIO_num(a) SKM_sk_num(BIO, (a))
	#define sk_BIO_value(a,b) SKM_sk_value(BIO, (a), (b))
	#define sk_BIO_set(a,b,c) SKM_sk_set(BIO, (a), (b), (c))
	#define sk_BIO_zero(a) SKM_sk_zero(BIO, (a))
	#define sk_BIO_push(a,b) SKM_sk_push(BIO, (a),(b))
	#define sk_BIO_unshift(a,b) SKM_sk_unshift(BIO, (a),(b))
	#define sk_BIO_find(a,b) SKM_sk_find(BIO, (a), (b))
	#define sk_BIO_delete(a,b) SKM_sk_delete(BIO, (a),(b))
	#define sk_BIO_delete_ptr(a,b) SKM_sk_delete_ptr(BIO, (a),(b))
	#define sk_BIO_insert(a,b,c) SKM_sk_insert(BIO, (a),(b),(c))
	#define sk_BIO_set_cmp_func(a,b) SKM_sk_set_cmp_func(BIO, (a),(b))
	#define sk_BIO_dup(a) SKM_sk_dup(BIO, a)
	#define sk_BIO_pop_free(a,b) SKM_sk_pop_free(BIO, (a),(b))
	#define sk_BIO_shift(a) SKM_sk_shift(BIO, (a))
	#define sk_BIO_pop(a) SKM_sk_pop(BIO, (a))
	#define sk_BIO_sort(a) SKM_sk_sort(BIO, (a))

	#define sk_CONF_VALUE_new(a) SKM_sk_new(CONF_VALUE, (a))
	#define sk_CONF_VALUE_new_null() SKM_sk_new_null(CONF_VALUE)
	#define sk_CONF_VALUE_free(a) SKM_sk_free(CONF_VALUE, (a))
	#define sk_CONF_VALUE_num(a) SKM_sk_num(CONF_VALUE, (a))
	#define sk_CONF_VALUE_value(a,b) SKM_sk_value(CONF_VALUE, (a), (b))
	#define sk_CONF_VALUE_set(a,b,c) SKM_sk_set(CONF_VALUE, (a), (b), (c))
	#define sk_CONF_VALUE_zero(a) SKM_sk_zero(CONF_VALUE, (a))
	#define sk_CONF_VALUE_push(a,b) SKM_sk_push(CONF_VALUE, (a),(b))
	#define sk_CONF_VALUE_unshift(a,b) SKM_sk_unshift(CONF_VALUE, (a),(b))
	#define sk_CONF_VALUE_find(a,b) SKM_sk_find(CONF_VALUE, (a), (b))
	#define sk_CONF_VALUE_delete(a,b) SKM_sk_delete(CONF_VALUE, (a),(b))
	#define sk_CONF_VALUE_delete_ptr(a,b) SKM_sk_delete_ptr(CONF_VALUE, (a),(b))
	#define sk_CONF_VALUE_insert(a,b,c) SKM_sk_insert(CONF_VALUE, (a),(b),(c))
	#define sk_CONF_VALUE_set_cmp_func(a,b) SKM_sk_set_cmp_func(CONF_VALUE, (a),(b))
	#define sk_CONF_VALUE_dup(a) SKM_sk_dup(CONF_VALUE, a)
	#define sk_CONF_VALUE_pop_free(a,b) SKM_sk_pop_free(CONF_VALUE, (a),(b))
	#define sk_CONF_VALUE_shift(a) SKM_sk_shift(CONF_VALUE, (a))
	#define sk_CONF_VALUE_pop(a) SKM_sk_pop(CONF_VALUE, (a))
	#define sk_CONF_VALUE_sort(a) SKM_sk_sort(CONF_VALUE, (a))

	#define sk_NAME_FUNCS_new(a) SKM_sk_new(NAME_FUNCS, (a))
	#define sk_NAME_FUNCS_new_null() SKM_sk_new_null(NAME_FUNCS)
	#define sk_NAME_FUNCS_free(a) SKM_sk_free(NAME_FUNCS, (a))
	#define sk_NAME_FUNCS_num(a) SKM_sk_num(NAME_FUNCS, (a))
	#define sk_NAME_FUNCS_value(a,b) SKM_sk_value(NAME_FUNCS, (a), (b))
	#define sk_NAME_FUNCS_set(a,b,c) SKM_sk_set(NAME_FUNCS, (a), (b), (c))
	#define sk_NAME_FUNCS_zero(a) SKM_sk_zero(NAME_FUNCS, (a))
	#define sk_NAME_FUNCS_push(a,b) SKM_sk_push(NAME_FUNCS, (a),(b))
	#define sk_NAME_FUNCS_unshift(a,b) SKM_sk_unshift(NAME_FUNCS, (a),(b))
	#define sk_NAME_FUNCS_find(a,b) SKM_sk_find(NAME_FUNCS, (a), (b))
	#define sk_NAME_FUNCS_delete(a,b) SKM_sk_delete(NAME_FUNCS, (a),(b))
	#define sk_NAME_FUNCS_delete_ptr(a,b) SKM_sk_delete_ptr(NAME_FUNCS, (a),(b))
	#define sk_NAME_FUNCS_insert(a,b,c) SKM_sk_insert(NAME_FUNCS, (a),(b),(c))
	#define sk_NAME_FUNCS_set_cmp_func(a,b) SKM_sk_set_cmp_func(NAME_FUNCS, (a),(b))
	#define sk_NAME_FUNCS_dup(a) SKM_sk_dup(NAME_FUNCS, a)
	#define sk_NAME_FUNCS_pop_free(a,b) SKM_sk_pop_free(NAME_FUNCS, (a),(b))
	#define sk_NAME_FUNCS_shift(a) SKM_sk_shift(NAME_FUNCS, (a))
	#define sk_NAME_FUNCS_pop(a) SKM_sk_pop(NAME_FUNCS, (a))
	#define sk_NAME_FUNCS_sort(a) SKM_sk_sort(NAME_FUNCS, (a))

	#define sk_PKCS12_SAFEBAG_new(a) SKM_sk_new(PKCS12_SAFEBAG, (a))
	#define sk_PKCS12_SAFEBAG_new_null() SKM_sk_new_null(PKCS12_SAFEBAG)
	#define sk_PKCS12_SAFEBAG_free(a) SKM_sk_free(PKCS12_SAFEBAG, (a))
	#define sk_PKCS12_SAFEBAG_num(a) SKM_sk_num(PKCS12_SAFEBAG, (a))
	#define sk_PKCS12_SAFEBAG_value(a,b) SKM_sk_value(PKCS12_SAFEBAG, (a), (b))
	#define sk_PKCS12_SAFEBAG_set(a,b,c) SKM_sk_set(PKCS12_SAFEBAG, (a), (b), (c))
	#define sk_PKCS12_SAFEBAG_zero(a) SKM_sk_zero(PKCS12_SAFEBAG, (a))
	#define sk_PKCS12_SAFEBAG_push(a,b) SKM_sk_push(PKCS12_SAFEBAG, (a),(b))
	#define sk_PKCS12_SAFEBAG_unshift(a,b) SKM_sk_unshift(PKCS12_SAFEBAG, (a),(b))
	#define sk_PKCS12_SAFEBAG_find(a,b) SKM_sk_find(PKCS12_SAFEBAG, (a), (b))
	#define sk_PKCS12_SAFEBAG_delete(a,b) SKM_sk_delete(PKCS12_SAFEBAG, (a),(b))
	#define sk_PKCS12_SAFEBAG_delete_ptr(a,b) SKM_sk_delete_ptr(PKCS12_SAFEBAG, (a),(b))
	#define sk_PKCS12_SAFEBAG_insert(a,b,c) SKM_sk_insert(PKCS12_SAFEBAG, (a),(b),(c))
	#define sk_PKCS12_SAFEBAG_set_cmp_func(a,b) SKM_sk_set_cmp_func(PKCS12_SAFEBAG, (a),(b))
	#define sk_PKCS12_SAFEBAG_dup(a) SKM_sk_dup(PKCS12_SAFEBAG, a)
	#define sk_PKCS12_SAFEBAG_pop_free(a,b) SKM_sk_pop_free(PKCS12_SAFEBAG, (a),(b))
	#define sk_PKCS12_SAFEBAG_shift(a) SKM_sk_shift(PKCS12_SAFEBAG, (a))
	#define sk_PKCS12_SAFEBAG_pop(a) SKM_sk_pop(PKCS12_SAFEBAG, (a))
	#define sk_PKCS12_SAFEBAG_sort(a) SKM_sk_sort(PKCS12_SAFEBAG, (a))

	#define sk_MIME_PARAM_new(a) SKM_sk_new(MIME_PARAM, (a))
	#define sk_MIME_PARAM_new_null() SKM_sk_new_null(MIME_PARAM)
	#define sk_MIME_PARAM_free(a) SKM_sk_free(MIME_PARAM, (a))
	#define sk_MIME_PARAM_num(a) SKM_sk_num(MIME_PARAM, (a))
	#define sk_MIME_PARAM_value(a,b) SKM_sk_value(MIME_PARAM, (a), (b))
	#define sk_MIME_PARAM_set(a,b,c) SKM_sk_set(MIME_PARAM, (a), (b), (c))
	#define sk_MIME_PARAM_zero(a) SKM_sk_zero(MIME_PARAM, (a))
	#define sk_MIME_PARAM_push(a,b) SKM_sk_push(MIME_PARAM, (a),(b))
	#define sk_MIME_PARAM_unshift(a,b) SKM_sk_unshift(MIME_PARAM, (a),(b))
	#define sk_MIME_PARAM_find(a,b) SKM_sk_find(MIME_PARAM, (a), (b))
	#define sk_MIME_PARAM_delete(a,b) SKM_sk_delete(MIME_PARAM, (a),(b))
	#define sk_MIME_PARAM_delete_ptr(a,b) SKM_sk_delete_ptr(MIME_PARAM, (a),(b))
	#define sk_MIME_PARAM_insert(a,b,c) SKM_sk_insert(MIME_PARAM, (a),(b),(c))
	#define sk_MIME_PARAM_set_cmp_func(a,b) SKM_sk_set_cmp_func(MIME_PARAM, (a),(b))
	#define sk_MIME_PARAM_dup(a) SKM_sk_dup(MIME_PARAM, a)
	#define sk_MIME_PARAM_pop_free(a,b) SKM_sk_pop_free(MIME_PARAM, (a),(b))
	#define sk_MIME_PARAM_shift(a) SKM_sk_shift(MIME_PARAM, (a))
	#define sk_MIME_PARAM_pop(a) SKM_sk_pop(MIME_PARAM, (a))
	#define sk_MIME_PARAM_sort(a) SKM_sk_sort(MIME_PARAM, (a))

	#define sk_MIME_HEADER_new(a) SKM_sk_new(MIME_HEADER, (a))
	#define sk_MIME_HEADER_new_null() SKM_sk_new_null(MIME_HEADER)
	#define sk_MIME_HEADER_free(a) SKM_sk_free(MIME_HEADER, (a))
	#define sk_MIME_HEADER_num(a) SKM_sk_num(MIME_HEADER, (a))
	#define sk_MIME_HEADER_value(a,b) SKM_sk_value(MIME_HEADER, (a), (b))
	#define sk_MIME_HEADER_set(a,b,c) SKM_sk_set(MIME_HEADER, (a), (b), (c))
	#define sk_MIME_HEADER_zero(a) SKM_sk_zero(MIME_HEADER, (a))
	#define sk_MIME_HEADER_push(a,b) SKM_sk_push(MIME_HEADER, (a),(b))
	#define sk_MIME_HEADER_unshift(a,b) SKM_sk_unshift(MIME_HEADER, (a),(b))
	#define sk_MIME_HEADER_find(a,b) SKM_sk_find(MIME_HEADER, (a), (b))
	#define sk_MIME_HEADER_delete(a,b) SKM_sk_delete(MIME_HEADER, (a),(b))
	#define sk_MIME_HEADER_delete_ptr(a,b) SKM_sk_delete_ptr(MIME_HEADER, (a),(b))
	#define sk_MIME_HEADER_insert(a,b,c) SKM_sk_insert(MIME_HEADER, (a),(b),(c))
	#define sk_MIME_HEADER_set_cmp_func(a,b) SKM_sk_set_cmp_func(MIME_HEADER, (a),(b))
	#define sk_MIME_HEADER_dup(a) SKM_sk_dup(MIME_HEADER, a)
	#define sk_MIME_HEADER_pop_free(a,b) SKM_sk_pop_free(MIME_HEADER, (a),(b))
	#define sk_MIME_HEADER_shift(a) SKM_sk_shift(MIME_HEADER, (a))
	#define sk_MIME_HEADER_pop(a) SKM_sk_pop(MIME_HEADER, (a))
	#define sk_MIME_HEADER_sort(a) SKM_sk_sort(MIME_HEADER, (a))

	#define sk_PKCS7_SIGNER_INFO_new(a) SKM_sk_new(PKCS7_SIGNER_INFO, (a))
	#define sk_PKCS7_SIGNER_INFO_new_null() SKM_sk_new_null(PKCS7_SIGNER_INFO)
	#define sk_PKCS7_SIGNER_INFO_free(a) SKM_sk_free(PKCS7_SIGNER_INFO, (a))
	#define sk_PKCS7_SIGNER_INFO_num(a) SKM_sk_num(PKCS7_SIGNER_INFO, (a))
	#define sk_PKCS7_SIGNER_INFO_value(a,b) SKM_sk_value(PKCS7_SIGNER_INFO, (a), (b))
	#define sk_PKCS7_SIGNER_INFO_set(a,b,c) SKM_sk_set(PKCS7_SIGNER_INFO, (a), (b), (c))
	#define sk_PKCS7_SIGNER_INFO_zero(a) SKM_sk_zero(PKCS7_SIGNER_INFO, (a))
	#define sk_PKCS7_SIGNER_INFO_push(a,b) SKM_sk_push(PKCS7_SIGNER_INFO, (a),(b))
	#define sk_PKCS7_SIGNER_INFO_unshift(a,b) SKM_sk_unshift(PKCS7_SIGNER_INFO, (a),(b))
	#define sk_PKCS7_SIGNER_INFO_find(a,b) SKM_sk_find(PKCS7_SIGNER_INFO, (a), (b))
	#define sk_PKCS7_SIGNER_INFO_delete(a,b) SKM_sk_delete(PKCS7_SIGNER_INFO, (a),(b))
	#define sk_PKCS7_SIGNER_INFO_delete_ptr(a,b) SKM_sk_delete_ptr(PKCS7_SIGNER_INFO, (a),(b))
	#define sk_PKCS7_SIGNER_INFO_insert(a,b,c) SKM_sk_insert(PKCS7_SIGNER_INFO, (a),(b),(c))
	#define sk_PKCS7_SIGNER_INFO_set_cmp_func(a,b) SKM_sk_set_cmp_func(PKCS7_SIGNER_INFO, (a),(b))
	#define sk_PKCS7_SIGNER_INFO_dup(a) SKM_sk_dup(PKCS7_SIGNER_INFO, a)
	#define sk_PKCS7_SIGNER_INFO_pop_free(a,b) SKM_sk_pop_free(PKCS7_SIGNER_INFO, (a),(b))
	#define sk_PKCS7_SIGNER_INFO_shift(a) SKM_sk_shift(PKCS7_SIGNER_INFO, (a))
	#define sk_PKCS7_SIGNER_INFO_pop(a) SKM_sk_pop(PKCS7_SIGNER_INFO, (a))
	#define sk_PKCS7_SIGNER_INFO_sort(a) SKM_sk_sort(PKCS7_SIGNER_INFO, (a))

	#define sk_PKCS7_RECIP_INFO_new(a) SKM_sk_new(PKCS7_RECIP_INFO, (a))
	#define sk_PKCS7_RECIP_INFO_new_null() SKM_sk_new_null(PKCS7_RECIP_INFO)
	#define sk_PKCS7_RECIP_INFO_free(a) SKM_sk_free(PKCS7_RECIP_INFO, (a))
	#define sk_PKCS7_RECIP_INFO_num(a) SKM_sk_num(PKCS7_RECIP_INFO, (a))
	#define sk_PKCS7_RECIP_INFO_value(a,b) SKM_sk_value(PKCS7_RECIP_INFO, (a), (b))
	#define sk_PKCS7_RECIP_INFO_set(a,b,c) SKM_sk_set(PKCS7_RECIP_INFO, (a), (b), (c))
	#define sk_PKCS7_RECIP_INFO_zero(a) SKM_sk_zero(PKCS7_RECIP_INFO, (a))
	#define sk_PKCS7_RECIP_INFO_push(a,b) SKM_sk_push(PKCS7_RECIP_INFO, (a),(b))
	#define sk_PKCS7_RECIP_INFO_unshift(a,b) SKM_sk_unshift(PKCS7_RECIP_INFO, (a),(b))
	#define sk_PKCS7_RECIP_INFO_find(a,b) SKM_sk_find(PKCS7_RECIP_INFO, (a), (b))
	#define sk_PKCS7_RECIP_INFO_delete(a,b) SKM_sk_delete(PKCS7_RECIP_INFO, (a),(b))
	#define sk_PKCS7_RECIP_INFO_delete_ptr(a,b) SKM_sk_delete_ptr(PKCS7_RECIP_INFO, (a),(b))
	#define sk_PKCS7_RECIP_INFO_insert(a,b,c) SKM_sk_insert(PKCS7_RECIP_INFO, (a),(b),(c))
	#define sk_PKCS7_RECIP_INFO_set_cmp_func(a,b) SKM_sk_set_cmp_func(PKCS7_RECIP_INFO, (a),(b))
	#define sk_PKCS7_RECIP_INFO_dup(a) SKM_sk_dup(PKCS7_RECIP_INFO, a)
	#define sk_PKCS7_RECIP_INFO_pop_free(a,b) SKM_sk_pop_free(PKCS7_RECIP_INFO, (a),(b))
	#define sk_PKCS7_RECIP_INFO_shift(a) SKM_sk_shift(PKCS7_RECIP_INFO, (a))
	#define sk_PKCS7_RECIP_INFO_pop(a) SKM_sk_pop(PKCS7_RECIP_INFO, (a))
	#define sk_PKCS7_RECIP_INFO_sort(a) SKM_sk_sort(PKCS7_RECIP_INFO, (a))

	#define sk_PKCS7_new(a) SKM_sk_new(PKCS7, (a))
	#define sk_PKCS7_new_null() SKM_sk_new_null(PKCS7)
	#define sk_PKCS7_free(a) SKM_sk_free(PKCS7, (a))
	#define sk_PKCS7_num(a) SKM_sk_num(PKCS7, (a))
	#define sk_PKCS7_value(a,b) SKM_sk_value(PKCS7, (a), (b))
	#define sk_PKCS7_set(a,b,c) SKM_sk_set(PKCS7, (a), (b), (c))
	#define sk_PKCS7_zero(a) SKM_sk_zero(PKCS7, (a))
	#define sk_PKCS7_push(a,b) SKM_sk_push(PKCS7, (a),(b))
	#define sk_PKCS7_unshift(a,b) SKM_sk_unshift(PKCS7, (a),(b))
	#define sk_PKCS7_find(a,b) SKM_sk_find(PKCS7, (a), (b))
	#define sk_PKCS7_delete(a,b) SKM_sk_delete(PKCS7, (a),(b))
	#define sk_PKCS7_delete_ptr(a,b) SKM_sk_delete_ptr(PKCS7, (a),(b))
	#define sk_PKCS7_insert(a,b,c) SKM_sk_insert(PKCS7, (a),(b),(c))
	#define sk_PKCS7_set_cmp_func(a,b) SKM_sk_set_cmp_func(PKCS7, (a),(b))
	#define sk_PKCS7_dup(a) SKM_sk_dup(PKCS7, a)
	#define sk_PKCS7_pop_free(a,b) SKM_sk_pop_free(PKCS7, (a),(b))
	#define sk_PKCS7_shift(a) SKM_sk_shift(PKCS7, (a))
	#define sk_PKCS7_pop(a) SKM_sk_pop(PKCS7, (a))
	#define sk_PKCS7_sort(a) SKM_sk_sort(PKCS7, (a))

	#define sk_X509_ALGOR_new(a) SKM_sk_new(X509_ALGOR, (a))
	#define sk_X509_ALGOR_new_null() SKM_sk_new_null(X509_ALGOR)
	#define sk_X509_ALGOR_free(a) SKM_sk_free(X509_ALGOR, (a))
	#define sk_X509_ALGOR_num(a) SKM_sk_num(X509_ALGOR, (a))
	#define sk_X509_ALGOR_value(a,b) SKM_sk_value(X509_ALGOR, (a), (b))
	#define sk_X509_ALGOR_set(a,b,c) SKM_sk_set(X509_ALGOR, (a), (b), (c))
	#define sk_X509_ALGOR_zero(a) SKM_sk_zero(X509_ALGOR, (a))
	#define sk_X509_ALGOR_push(a,b) SKM_sk_push(X509_ALGOR, (a),(b))
	#define sk_X509_ALGOR_unshift(a,b) SKM_sk_unshift(X509_ALGOR, (a),(b))
	#define sk_X509_ALGOR_find(a,b) SKM_sk_find(X509_ALGOR, (a), (b))
	#define sk_X509_ALGOR_delete(a,b) SKM_sk_delete(X509_ALGOR, (a),(b))
	#define sk_X509_ALGOR_delete_ptr(a,b) SKM_sk_delete_ptr(X509_ALGOR, (a),(b))
	#define sk_X509_ALGOR_insert(a,b,c) SKM_sk_insert(X509_ALGOR, (a),(b),(c))
	#define sk_X509_ALGOR_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_ALGOR, (a),(b))
	#define sk_X509_ALGOR_dup(a) SKM_sk_dup(X509_ALGOR, a)
	#define sk_X509_ALGOR_pop_free(a,b) SKM_sk_pop_free(X509_ALGOR, (a),(b))
	#define sk_X509_ALGOR_shift(a) SKM_sk_shift(X509_ALGOR, (a))
	#define sk_X509_ALGOR_pop(a) SKM_sk_pop(X509_ALGOR, (a))
	#define sk_X509_ALGOR_sort(a) SKM_sk_sort(X509_ALGOR, (a))

	#define sk_X509_NAME_ENTRY_new(a) SKM_sk_new(X509_NAME_ENTRY, (a))
	#define sk_X509_NAME_ENTRY_new_null() SKM_sk_new_null(X509_NAME_ENTRY)
	#define sk_X509_NAME_ENTRY_free(a) SKM_sk_free(X509_NAME_ENTRY, (a))
	#define sk_X509_NAME_ENTRY_num(a) SKM_sk_num(X509_NAME_ENTRY, (a))
	#define sk_X509_NAME_ENTRY_value(a,b) SKM_sk_value(X509_NAME_ENTRY, (a), (b))
	#define sk_X509_NAME_ENTRY_set(a,b,c) SKM_sk_set(X509_NAME_ENTRY, (a), (b), (c))
	#define sk_X509_NAME_ENTRY_zero(a) SKM_sk_zero(X509_NAME_ENTRY, (a))
	#define sk_X509_NAME_ENTRY_push(a,b) SKM_sk_push(X509_NAME_ENTRY, (a),(b))
	#define sk_X509_NAME_ENTRY_unshift(a,b) SKM_sk_unshift(X509_NAME_ENTRY, (a),(b))
	#define sk_X509_NAME_ENTRY_find(a,b) SKM_sk_find(X509_NAME_ENTRY, (a), (b))
	#define sk_X509_NAME_ENTRY_delete(a,b) SKM_sk_delete(X509_NAME_ENTRY, (a),(b))
	#define sk_X509_NAME_ENTRY_delete_ptr(a,b) SKM_sk_delete_ptr(X509_NAME_ENTRY, (a),(b))
	#define sk_X509_NAME_ENTRY_insert(a,b,c) SKM_sk_insert(X509_NAME_ENTRY, (a),(b),(c))
	#define sk_X509_NAME_ENTRY_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_NAME_ENTRY, (a),(b))
	#define sk_X509_NAME_ENTRY_dup(a) SKM_sk_dup(X509_NAME_ENTRY, a)
	#define sk_X509_NAME_ENTRY_pop_free(a,b) SKM_sk_pop_free(X509_NAME_ENTRY, (a),(b))
	#define sk_X509_NAME_ENTRY_shift(a) SKM_sk_shift(X509_NAME_ENTRY, (a))
	#define sk_X509_NAME_ENTRY_pop(a) SKM_sk_pop(X509_NAME_ENTRY, (a))
	#define sk_X509_NAME_ENTRY_sort(a) SKM_sk_sort(X509_NAME_ENTRY, (a))

	#define sk_X509_NAME_new(a) SKM_sk_new(X509_NAME, (a))
	#define sk_X509_NAME_new_null() SKM_sk_new_null(X509_NAME)
	#define sk_X509_NAME_free(a) SKM_sk_free(X509_NAME, (a))
	#define sk_X509_NAME_num(a) SKM_sk_num(X509_NAME, (a))
	#define sk_X509_NAME_value(a,b) SKM_sk_value(X509_NAME, (a), (b))
	#define sk_X509_NAME_set(a,b,c) SKM_sk_set(X509_NAME, (a), (b), (c))
	#define sk_X509_NAME_zero(a) SKM_sk_zero(X509_NAME, (a))
	#define sk_X509_NAME_push(a,b) SKM_sk_push(X509_NAME, (a),(b))
	#define sk_X509_NAME_unshift(a,b) SKM_sk_unshift(X509_NAME, (a),(b))
	#define sk_X509_NAME_find(a,b) SKM_sk_find(X509_NAME, (a), (b))
	#define sk_X509_NAME_delete(a,b) SKM_sk_delete(X509_NAME, (a),(b))
	#define sk_X509_NAME_delete_ptr(a,b) SKM_sk_delete_ptr(X509_NAME, (a),(b))
	#define sk_X509_NAME_insert(a,b,c) SKM_sk_insert(X509_NAME, (a),(b),(c))
	#define sk_X509_NAME_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_NAME, (a),(b))
	#define sk_X509_NAME_dup(a) SKM_sk_dup(X509_NAME, a)
	#define sk_X509_NAME_pop_free(a,b) SKM_sk_pop_free(X509_NAME, (a),(b))
	#define sk_X509_NAME_shift(a) SKM_sk_shift(X509_NAME, (a))
	#define sk_X509_NAME_pop(a) SKM_sk_pop(X509_NAME, (a))
	#define sk_X509_NAME_sort(a) SKM_sk_sort(X509_NAME, (a))

	#define sk_X509_EXTENSION_new(a) SKM_sk_new(X509_EXTENSION, (a))
	#define sk_X509_EXTENSION_new_null() SKM_sk_new_null(X509_EXTENSION)
	#define sk_X509_EXTENSION_free(a) SKM_sk_free(X509_EXTENSION, (a))
	#define sk_X509_EXTENSION_num(a) SKM_sk_num(X509_EXTENSION, (a))
	#define sk_X509_EXTENSION_value(a,b) SKM_sk_value(X509_EXTENSION, (a), (b))
	#define sk_X509_EXTENSION_set(a,b,c) SKM_sk_set(X509_EXTENSION, (a), (b), (c))
	#define sk_X509_EXTENSION_zero(a) SKM_sk_zero(X509_EXTENSION, (a))
	#define sk_X509_EXTENSION_push(a,b) SKM_sk_push(X509_EXTENSION, (a),(b))
	#define sk_X509_EXTENSION_unshift(a,b) SKM_sk_unshift(X509_EXTENSION, (a),(b))
	#define sk_X509_EXTENSION_find(a,b) SKM_sk_find(X509_EXTENSION, (a), (b))
	#define sk_X509_EXTENSION_delete(a,b) SKM_sk_delete(X509_EXTENSION, (a),(b))
	#define sk_X509_EXTENSION_delete_ptr(a,b) SKM_sk_delete_ptr(X509_EXTENSION, (a),(b))
	#define sk_X509_EXTENSION_insert(a,b,c) SKM_sk_insert(X509_EXTENSION, (a),(b),(c))
	#define sk_X509_EXTENSION_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_EXTENSION, (a),(b))
	#define sk_X509_EXTENSION_dup(a) SKM_sk_dup(X509_EXTENSION, a)
	#define sk_X509_EXTENSION_pop_free(a,b) SKM_sk_pop_free(X509_EXTENSION, (a),(b))
	#define sk_X509_EXTENSION_shift(a) SKM_sk_shift(X509_EXTENSION, (a))
	#define sk_X509_EXTENSION_pop(a) SKM_sk_pop(X509_EXTENSION, (a))
	#define sk_X509_EXTENSION_sort(a) SKM_sk_sort(X509_EXTENSION, (a))

	#define sk_X509_ATTRIBUTE_new(a) SKM_sk_new(X509_ATTRIBUTE, (a))
	#define sk_X509_ATTRIBUTE_new_null() SKM_sk_new_null(X509_ATTRIBUTE)
	#define sk_X509_ATTRIBUTE_free(a) SKM_sk_free(X509_ATTRIBUTE, (a))
	#define sk_X509_ATTRIBUTE_num(a) SKM_sk_num(X509_ATTRIBUTE, (a))
	#define sk_X509_ATTRIBUTE_value(a,b) SKM_sk_value(X509_ATTRIBUTE, (a), (b))
	#define sk_X509_ATTRIBUTE_set(a,b,c) SKM_sk_set(X509_ATTRIBUTE, (a), (b), (c))
	#define sk_X509_ATTRIBUTE_zero(a) SKM_sk_zero(X509_ATTRIBUTE, (a))
	#define sk_X509_ATTRIBUTE_push(a,b) SKM_sk_push(X509_ATTRIBUTE, (a),(b))
	#define sk_X509_ATTRIBUTE_unshift(a,b) SKM_sk_unshift(X509_ATTRIBUTE, (a),(b))
	#define sk_X509_ATTRIBUTE_find(a,b) SKM_sk_find(X509_ATTRIBUTE, (a), (b))
	#define sk_X509_ATTRIBUTE_delete(a,b) SKM_sk_delete(X509_ATTRIBUTE, (a),(b))
	#define sk_X509_ATTRIBUTE_delete_ptr(a,b) SKM_sk_delete_ptr(X509_ATTRIBUTE, (a),(b))
	#define sk_X509_ATTRIBUTE_insert(a,b,c) SKM_sk_insert(X509_ATTRIBUTE, (a),(b),(c))
	#define sk_X509_ATTRIBUTE_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_ATTRIBUTE, (a),(b))
	#define sk_X509_ATTRIBUTE_dup(a) SKM_sk_dup(X509_ATTRIBUTE, a)
	#define sk_X509_ATTRIBUTE_pop_free(a,b) SKM_sk_pop_free(X509_ATTRIBUTE, (a),(b))
	#define sk_X509_ATTRIBUTE_shift(a) SKM_sk_shift(X509_ATTRIBUTE, (a))
	#define sk_X509_ATTRIBUTE_pop(a) SKM_sk_pop(X509_ATTRIBUTE, (a))
	#define sk_X509_ATTRIBUTE_sort(a) SKM_sk_sort(X509_ATTRIBUTE, (a))

	#define sk_X509_new(a) SKM_sk_new(X509, (a))
	#define sk_X509_new_null() SKM_sk_new_null(X509)
	#define sk_X509_free(a) SKM_sk_free(X509, (a))
	#define sk_X509_num(a) SKM_sk_num(X509, (a))
	#define sk_X509_value(a,b) SKM_sk_value(X509, (a), (b))
	#define sk_X509_set(a,b,c) SKM_sk_set(X509, (a), (b), (c))
	#define sk_X509_zero(a) SKM_sk_zero(X509, (a))
	#define sk_X509_push(a,b) SKM_sk_push(X509, (a),(b))
	#define sk_X509_unshift(a,b) SKM_sk_unshift(X509, (a),(b))
	#define sk_X509_find(a,b) SKM_sk_find(X509, (a), (b))
	#define sk_X509_delete(a,b) SKM_sk_delete(X509, (a),(b))
	#define sk_X509_delete_ptr(a,b) SKM_sk_delete_ptr(X509, (a),(b))
	#define sk_X509_insert(a,b,c) SKM_sk_insert(X509, (a),(b),(c))
	#define sk_X509_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509, (a),(b))
	#define sk_X509_dup(a) SKM_sk_dup(X509, a)
	#define sk_X509_pop_free(a,b) SKM_sk_pop_free(X509, (a),(b))
	#define sk_X509_shift(a) SKM_sk_shift(X509, (a))
	#define sk_X509_pop(a) SKM_sk_pop(X509, (a))
	#define sk_X509_sort(a) SKM_sk_sort(X509, (a))

	#define sk_X509_TRUST_new(a) SKM_sk_new(X509_TRUST, (a))
	#define sk_X509_TRUST_new_null() SKM_sk_new_null(X509_TRUST)
	#define sk_X509_TRUST_free(a) SKM_sk_free(X509_TRUST, (a))
	#define sk_X509_TRUST_num(a) SKM_sk_num(X509_TRUST, (a))
	#define sk_X509_TRUST_value(a,b) SKM_sk_value(X509_TRUST, (a), (b))
	#define sk_X509_TRUST_set(a,b,c) SKM_sk_set(X509_TRUST, (a), (b), (c))
	#define sk_X509_TRUST_zero(a) SKM_sk_zero(X509_TRUST, (a))
	#define sk_X509_TRUST_push(a,b) SKM_sk_push(X509_TRUST, (a),(b))
	#define sk_X509_TRUST_unshift(a,b) SKM_sk_unshift(X509_TRUST, (a),(b))
	#define sk_X509_TRUST_find(a,b) SKM_sk_find(X509_TRUST, (a), (b))
	#define sk_X509_TRUST_delete(a,b) SKM_sk_delete(X509_TRUST, (a),(b))
	#define sk_X509_TRUST_delete_ptr(a,b) SKM_sk_delete_ptr(X509_TRUST, (a),(b))
	#define sk_X509_TRUST_insert(a,b,c) SKM_sk_insert(X509_TRUST, (a),(b),(c))
	#define sk_X509_TRUST_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_TRUST, (a),(b))
	#define sk_X509_TRUST_dup(a) SKM_sk_dup(X509_TRUST, a)
	#define sk_X509_TRUST_pop_free(a,b) SKM_sk_pop_free(X509_TRUST, (a),(b))
	#define sk_X509_TRUST_shift(a) SKM_sk_shift(X509_TRUST, (a))
	#define sk_X509_TRUST_pop(a) SKM_sk_pop(X509_TRUST, (a))
	#define sk_X509_TRUST_sort(a) SKM_sk_sort(X509_TRUST, (a))

	#define sk_X509_REVOKED_new(a) SKM_sk_new(X509_REVOKED, (a))
	#define sk_X509_REVOKED_new_null() SKM_sk_new_null(X509_REVOKED)
	#define sk_X509_REVOKED_free(a) SKM_sk_free(X509_REVOKED, (a))
	#define sk_X509_REVOKED_num(a) SKM_sk_num(X509_REVOKED, (a))
	#define sk_X509_REVOKED_value(a,b) SKM_sk_value(X509_REVOKED, (a), (b))
	#define sk_X509_REVOKED_set(a,b,c) SKM_sk_set(X509_REVOKED, (a), (b), (c))
	#define sk_X509_REVOKED_zero(a) SKM_sk_zero(X509_REVOKED, (a))
	#define sk_X509_REVOKED_push(a,b) SKM_sk_push(X509_REVOKED, (a),(b))
	#define sk_X509_REVOKED_unshift(a,b) SKM_sk_unshift(X509_REVOKED, (a),(b))
	#define sk_X509_REVOKED_find(a,b) SKM_sk_find(X509_REVOKED, (a), (b))
	#define sk_X509_REVOKED_delete(a,b) SKM_sk_delete(X509_REVOKED, (a),(b))
	#define sk_X509_REVOKED_delete_ptr(a,b) SKM_sk_delete_ptr(X509_REVOKED, (a),(b))
	#define sk_X509_REVOKED_insert(a,b,c) SKM_sk_insert(X509_REVOKED, (a),(b),(c))
	#define sk_X509_REVOKED_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_REVOKED, (a),(b))
	#define sk_X509_REVOKED_dup(a) SKM_sk_dup(X509_REVOKED, a)
	#define sk_X509_REVOKED_pop_free(a,b) SKM_sk_pop_free(X509_REVOKED, (a),(b))
	#define sk_X509_REVOKED_shift(a) SKM_sk_shift(X509_REVOKED, (a))
	#define sk_X509_REVOKED_pop(a) SKM_sk_pop(X509_REVOKED, (a))
	#define sk_X509_REVOKED_sort(a) SKM_sk_sort(X509_REVOKED, (a))

	#define sk_X509_CRL_new(a) SKM_sk_new(X509_CRL, (a))
	#define sk_X509_CRL_new_null() SKM_sk_new_null(X509_CRL)
	#define sk_X509_CRL_free(a) SKM_sk_free(X509_CRL, (a))
	#define sk_X509_CRL_num(a) SKM_sk_num(X509_CRL, (a))
	#define sk_X509_CRL_value(a,b) SKM_sk_value(X509_CRL, (a), (b))
	#define sk_X509_CRL_set(a,b,c) SKM_sk_set(X509_CRL, (a), (b), (c))
	#define sk_X509_CRL_zero(a) SKM_sk_zero(X509_CRL, (a))
	#define sk_X509_CRL_push(a,b) SKM_sk_push(X509_CRL, (a),(b))
	#define sk_X509_CRL_unshift(a,b) SKM_sk_unshift(X509_CRL, (a),(b))
	#define sk_X509_CRL_find(a,b) SKM_sk_find(X509_CRL, (a), (b))
	#define sk_X509_CRL_delete(a,b) SKM_sk_delete(X509_CRL, (a),(b))
	#define sk_X509_CRL_delete_ptr(a,b) SKM_sk_delete_ptr(X509_CRL, (a),(b))
	#define sk_X509_CRL_insert(a,b,c) SKM_sk_insert(X509_CRL, (a),(b),(c))
	#define sk_X509_CRL_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_CRL, (a),(b))
	#define sk_X509_CRL_dup(a) SKM_sk_dup(X509_CRL, a)
	#define sk_X509_CRL_pop_free(a,b) SKM_sk_pop_free(X509_CRL, (a),(b))
	#define sk_X509_CRL_shift(a) SKM_sk_shift(X509_CRL, (a))
	#define sk_X509_CRL_pop(a) SKM_sk_pop(X509_CRL, (a))
	#define sk_X509_CRL_sort(a) SKM_sk_sort(X509_CRL, (a))

	#define sk_X509_INFO_new(a) SKM_sk_new(X509_INFO, (a))
	#define sk_X509_INFO_new_null() SKM_sk_new_null(X509_INFO)
	#define sk_X509_INFO_free(a) SKM_sk_free(X509_INFO, (a))
	#define sk_X509_INFO_num(a) SKM_sk_num(X509_INFO, (a))
	#define sk_X509_INFO_value(a,b) SKM_sk_value(X509_INFO, (a), (b))
	#define sk_X509_INFO_set(a,b,c) SKM_sk_set(X509_INFO, (a), (b), (c))
	#define sk_X509_INFO_zero(a) SKM_sk_zero(X509_INFO, (a))
	#define sk_X509_INFO_push(a,b) SKM_sk_push(X509_INFO, (a),(b))
	#define sk_X509_INFO_unshift(a,b) SKM_sk_unshift(X509_INFO, (a),(b))
	#define sk_X509_INFO_find(a,b) SKM_sk_find(X509_INFO, (a), (b))
	#define sk_X509_INFO_delete(a,b) SKM_sk_delete(X509_INFO, (a),(b))
	#define sk_X509_INFO_delete_ptr(a,b) SKM_sk_delete_ptr(X509_INFO, (a),(b))
	#define sk_X509_INFO_insert(a,b,c) SKM_sk_insert(X509_INFO, (a),(b),(c))
	#define sk_X509_INFO_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_INFO, (a),(b))
	#define sk_X509_INFO_dup(a) SKM_sk_dup(X509_INFO, a)
	#define sk_X509_INFO_pop_free(a,b) SKM_sk_pop_free(X509_INFO, (a),(b))
	#define sk_X509_INFO_shift(a) SKM_sk_shift(X509_INFO, (a))
	#define sk_X509_INFO_pop(a) SKM_sk_pop(X509_INFO, (a))
	#define sk_X509_INFO_sort(a) SKM_sk_sort(X509_INFO, (a))

	#define sk_X509_LOOKUP_new(a) SKM_sk_new(X509_LOOKUP, (a))
	#define sk_X509_LOOKUP_new_null() SKM_sk_new_null(X509_LOOKUP)
	#define sk_X509_LOOKUP_free(a) SKM_sk_free(X509_LOOKUP, (a))
	#define sk_X509_LOOKUP_num(a) SKM_sk_num(X509_LOOKUP, (a))
	#define sk_X509_LOOKUP_value(a,b) SKM_sk_value(X509_LOOKUP, (a), (b))
	#define sk_X509_LOOKUP_set(a,b,c) SKM_sk_set(X509_LOOKUP, (a), (b), (c))
	#define sk_X509_LOOKUP_zero(a) SKM_sk_zero(X509_LOOKUP, (a))
	#define sk_X509_LOOKUP_push(a,b) SKM_sk_push(X509_LOOKUP, (a),(b))
	#define sk_X509_LOOKUP_unshift(a,b) SKM_sk_unshift(X509_LOOKUP, (a),(b))
	#define sk_X509_LOOKUP_find(a,b) SKM_sk_find(X509_LOOKUP, (a), (b))
	#define sk_X509_LOOKUP_delete(a,b) SKM_sk_delete(X509_LOOKUP, (a),(b))
	#define sk_X509_LOOKUP_delete_ptr(a,b) SKM_sk_delete_ptr(X509_LOOKUP, (a),(b))
	#define sk_X509_LOOKUP_insert(a,b,c) SKM_sk_insert(X509_LOOKUP, (a),(b),(c))
	#define sk_X509_LOOKUP_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_LOOKUP, (a),(b))
	#define sk_X509_LOOKUP_dup(a) SKM_sk_dup(X509_LOOKUP, a)
	#define sk_X509_LOOKUP_pop_free(a,b) SKM_sk_pop_free(X509_LOOKUP, (a),(b))
	#define sk_X509_LOOKUP_shift(a) SKM_sk_shift(X509_LOOKUP, (a))
	#define sk_X509_LOOKUP_pop(a) SKM_sk_pop(X509_LOOKUP, (a))
	#define sk_X509_LOOKUP_sort(a) SKM_sk_sort(X509_LOOKUP, (a))

	#define sk_X509V3_EXT_METHOD_new(a) SKM_sk_new(X509V3_EXT_METHOD, (a))
	#define sk_X509V3_EXT_METHOD_new_null() SKM_sk_new_null(X509V3_EXT_METHOD)
	#define sk_X509V3_EXT_METHOD_free(a) SKM_sk_free(X509V3_EXT_METHOD, (a))
	#define sk_X509V3_EXT_METHOD_num(a) SKM_sk_num(X509V3_EXT_METHOD, (a))
	#define sk_X509V3_EXT_METHOD_value(a,b) SKM_sk_value(X509V3_EXT_METHOD, (a), (b))
	#define sk_X509V3_EXT_METHOD_set(a,b,c) SKM_sk_set(X509V3_EXT_METHOD, (a), (b), (c))
	#define sk_X509V3_EXT_METHOD_zero(a) SKM_sk_zero(X509V3_EXT_METHOD, (a))
	#define sk_X509V3_EXT_METHOD_push(a,b) SKM_sk_push(X509V3_EXT_METHOD, (a),(b))
	#define sk_X509V3_EXT_METHOD_unshift(a,b) SKM_sk_unshift(X509V3_EXT_METHOD, (a),(b))
	#define sk_X509V3_EXT_METHOD_find(a,b) SKM_sk_find(X509V3_EXT_METHOD, (a), (b))
	#define sk_X509V3_EXT_METHOD_delete(a,b) SKM_sk_delete(X509V3_EXT_METHOD, (a),(b))
	#define sk_X509V3_EXT_METHOD_delete_ptr(a,b) SKM_sk_delete_ptr(X509V3_EXT_METHOD, (a),(b))
	#define sk_X509V3_EXT_METHOD_insert(a,b,c) SKM_sk_insert(X509V3_EXT_METHOD, (a),(b),(c))
	#define sk_X509V3_EXT_METHOD_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509V3_EXT_METHOD, (a),(b))
	#define sk_X509V3_EXT_METHOD_dup(a) SKM_sk_dup(X509V3_EXT_METHOD, a)
	#define sk_X509V3_EXT_METHOD_pop_free(a,b) SKM_sk_pop_free(X509V3_EXT_METHOD, (a),(b))
	#define sk_X509V3_EXT_METHOD_shift(a) SKM_sk_shift(X509V3_EXT_METHOD, (a))
	#define sk_X509V3_EXT_METHOD_pop(a) SKM_sk_pop(X509V3_EXT_METHOD, (a))
	#define sk_X509V3_EXT_METHOD_sort(a) SKM_sk_sort(X509V3_EXT_METHOD, (a))

	#define sk_GENERAL_NAME_new(a) SKM_sk_new(GENERAL_NAME, (a))
	#define sk_GENERAL_NAME_new_null() SKM_sk_new_null(GENERAL_NAME)
	#define sk_GENERAL_NAME_free(a) SKM_sk_free(GENERAL_NAME, (a))
	#define sk_GENERAL_NAME_num(a) SKM_sk_num(GENERAL_NAME, (a))
	#define sk_GENERAL_NAME_value(a,b) SKM_sk_value(GENERAL_NAME, (a), (b))
	#define sk_GENERAL_NAME_set(a,b,c) SKM_sk_set(GENERAL_NAME, (a), (b), (c))
	#define sk_GENERAL_NAME_zero(a) SKM_sk_zero(GENERAL_NAME, (a))
	#define sk_GENERAL_NAME_push(a,b) SKM_sk_push(GENERAL_NAME, (a),(b))
	#define sk_GENERAL_NAME_unshift(a,b) SKM_sk_unshift(GENERAL_NAME, (a),(b))
	#define sk_GENERAL_NAME_find(a,b) SKM_sk_find(GENERAL_NAME, (a), (b))
	#define sk_GENERAL_NAME_delete(a,b) SKM_sk_delete(GENERAL_NAME, (a),(b))
	#define sk_GENERAL_NAME_delete_ptr(a,b) SKM_sk_delete_ptr(GENERAL_NAME, (a),(b))
	#define sk_GENERAL_NAME_insert(a,b,c) SKM_sk_insert(GENERAL_NAME, (a),(b),(c))
	#define sk_GENERAL_NAME_set_cmp_func(a,b) SKM_sk_set_cmp_func(GENERAL_NAME, (a),(b))
	#define sk_GENERAL_NAME_dup(a) SKM_sk_dup(GENERAL_NAME, a)
	#define sk_GENERAL_NAME_pop_free(a,b) SKM_sk_pop_free(GENERAL_NAME, (a),(b))
	#define sk_GENERAL_NAME_shift(a) SKM_sk_shift(GENERAL_NAME, (a))
	#define sk_GENERAL_NAME_pop(a) SKM_sk_pop(GENERAL_NAME, (a))
	#define sk_GENERAL_NAME_sort(a) SKM_sk_sort(GENERAL_NAME, (a))

	#define sk_ACCESS_DESCRIPTION_new(a) SKM_sk_new(ACCESS_DESCRIPTION, (a))
	#define sk_ACCESS_DESCRIPTION_new_null() SKM_sk_new_null(ACCESS_DESCRIPTION)
	#define sk_ACCESS_DESCRIPTION_free(a) SKM_sk_free(ACCESS_DESCRIPTION, (a))
	#define sk_ACCESS_DESCRIPTION_num(a) SKM_sk_num(ACCESS_DESCRIPTION, (a))
	#define sk_ACCESS_DESCRIPTION_value(a,b) SKM_sk_value(ACCESS_DESCRIPTION, (a), (b))
	#define sk_ACCESS_DESCRIPTION_set(a,b,c) SKM_sk_set(ACCESS_DESCRIPTION, (a), (b), (c))
	#define sk_ACCESS_DESCRIPTION_zero(a) SKM_sk_zero(ACCESS_DESCRIPTION, (a))
	#define sk_ACCESS_DESCRIPTION_push(a,b) SKM_sk_push(ACCESS_DESCRIPTION, (a),(b))
	#define sk_ACCESS_DESCRIPTION_unshift(a,b) SKM_sk_unshift(ACCESS_DESCRIPTION, (a),(b))
	#define sk_ACCESS_DESCRIPTION_find(a,b) SKM_sk_find(ACCESS_DESCRIPTION, (a), (b))
	#define sk_ACCESS_DESCRIPTION_delete(a,b) SKM_sk_delete(ACCESS_DESCRIPTION, (a),(b))
	#define sk_ACCESS_DESCRIPTION_delete_ptr(a,b) SKM_sk_delete_ptr(ACCESS_DESCRIPTION, (a),(b))
	#define sk_ACCESS_DESCRIPTION_insert(a,b,c) SKM_sk_insert(ACCESS_DESCRIPTION, (a),(b),(c))
	#define sk_ACCESS_DESCRIPTION_set_cmp_func(a,b) SKM_sk_set_cmp_func(ACCESS_DESCRIPTION, (a),(b))
	#define sk_ACCESS_DESCRIPTION_dup(a) SKM_sk_dup(ACCESS_DESCRIPTION, a)
	#define sk_ACCESS_DESCRIPTION_pop_free(a,b) SKM_sk_pop_free(ACCESS_DESCRIPTION, (a),(b))
	#define sk_ACCESS_DESCRIPTION_shift(a) SKM_sk_shift(ACCESS_DESCRIPTION, (a))
	#define sk_ACCESS_DESCRIPTION_pop(a) SKM_sk_pop(ACCESS_DESCRIPTION, (a))
	#define sk_ACCESS_DESCRIPTION_sort(a) SKM_sk_sort(ACCESS_DESCRIPTION, (a))

	#define sk_DIST_POINT_new(a) SKM_sk_new(DIST_POINT, (a))
	#define sk_DIST_POINT_new_null() SKM_sk_new_null(DIST_POINT)
	#define sk_DIST_POINT_free(a) SKM_sk_free(DIST_POINT, (a))
	#define sk_DIST_POINT_num(a) SKM_sk_num(DIST_POINT, (a))
	#define sk_DIST_POINT_value(a,b) SKM_sk_value(DIST_POINT, (a), (b))
	#define sk_DIST_POINT_set(a,b,c) SKM_sk_set(DIST_POINT, (a), (b), (c))
	#define sk_DIST_POINT_zero(a) SKM_sk_zero(DIST_POINT, (a))
	#define sk_DIST_POINT_push(a,b) SKM_sk_push(DIST_POINT, (a),(b))
	#define sk_DIST_POINT_unshift(a,b) SKM_sk_unshift(DIST_POINT, (a),(b))
	#define sk_DIST_POINT_find(a,b) SKM_sk_find(DIST_POINT, (a), (b))
	#define sk_DIST_POINT_delete(a,b) SKM_sk_delete(DIST_POINT, (a),(b))
	#define sk_DIST_POINT_delete_ptr(a,b) SKM_sk_delete_ptr(DIST_POINT, (a),(b))
	#define sk_DIST_POINT_insert(a,b,c) SKM_sk_insert(DIST_POINT, (a),(b),(c))
	#define sk_DIST_POINT_set_cmp_func(a,b) SKM_sk_set_cmp_func(DIST_POINT, (a),(b))
	#define sk_DIST_POINT_dup(a) SKM_sk_dup(DIST_POINT, a)
	#define sk_DIST_POINT_pop_free(a,b) SKM_sk_pop_free(DIST_POINT, (a),(b))
	#define sk_DIST_POINT_shift(a) SKM_sk_shift(DIST_POINT, (a))
	#define sk_DIST_POINT_pop(a) SKM_sk_pop(DIST_POINT, (a))
	#define sk_DIST_POINT_sort(a) SKM_sk_sort(DIST_POINT, (a))

	#define sk_SXNETID_new(a) SKM_sk_new(SXNETID, (a))
	#define sk_SXNETID_new_null() SKM_sk_new_null(SXNETID)
	#define sk_SXNETID_free(a) SKM_sk_free(SXNETID, (a))
	#define sk_SXNETID_num(a) SKM_sk_num(SXNETID, (a))
	#define sk_SXNETID_value(a,b) SKM_sk_value(SXNETID, (a), (b))
	#define sk_SXNETID_set(a,b,c) SKM_sk_set(SXNETID, (a), (b), (c))
	#define sk_SXNETID_zero(a) SKM_sk_zero(SXNETID, (a))
	#define sk_SXNETID_push(a,b) SKM_sk_push(SXNETID, (a),(b))
	#define sk_SXNETID_unshift(a,b) SKM_sk_unshift(SXNETID, (a),(b))
	#define sk_SXNETID_find(a,b) SKM_sk_find(SXNETID, (a), (b))
	#define sk_SXNETID_delete(a,b) SKM_sk_delete(SXNETID, (a),(b))
	#define sk_SXNETID_delete_ptr(a,b) SKM_sk_delete_ptr(SXNETID, (a),(b))
	#define sk_SXNETID_insert(a,b,c) SKM_sk_insert(SXNETID, (a),(b),(c))
	#define sk_SXNETID_set_cmp_func(a,b) SKM_sk_set_cmp_func(SXNETID, (a),(b))
	#define sk_SXNETID_dup(a) SKM_sk_dup(SXNETID, a)
	#define sk_SXNETID_pop_free(a,b) SKM_sk_pop_free(SXNETID, (a),(b))
	#define sk_SXNETID_shift(a) SKM_sk_shift(SXNETID, (a))
	#define sk_SXNETID_pop(a) SKM_sk_pop(SXNETID, (a))
	#define sk_SXNETID_sort(a) SKM_sk_sort(SXNETID, (a))

	#define sk_POLICYQUALINFO_new(a) SKM_sk_new(POLICYQUALINFO, (a))
	#define sk_POLICYQUALINFO_new_null() SKM_sk_new_null(POLICYQUALINFO)
	#define sk_POLICYQUALINFO_free(a) SKM_sk_free(POLICYQUALINFO, (a))
	#define sk_POLICYQUALINFO_num(a) SKM_sk_num(POLICYQUALINFO, (a))
	#define sk_POLICYQUALINFO_value(a,b) SKM_sk_value(POLICYQUALINFO, (a), (b))
	#define sk_POLICYQUALINFO_set(a,b,c) SKM_sk_set(POLICYQUALINFO, (a), (b), (c))
	#define sk_POLICYQUALINFO_zero(a) SKM_sk_zero(POLICYQUALINFO, (a))
	#define sk_POLICYQUALINFO_push(a,b) SKM_sk_push(POLICYQUALINFO, (a),(b))
	#define sk_POLICYQUALINFO_unshift(a,b) SKM_sk_unshift(POLICYQUALINFO, (a),(b))
	#define sk_POLICYQUALINFO_find(a,b) SKM_sk_find(POLICYQUALINFO, (a), (b))
	#define sk_POLICYQUALINFO_delete(a,b) SKM_sk_delete(POLICYQUALINFO, (a),(b))
	#define sk_POLICYQUALINFO_delete_ptr(a,b) SKM_sk_delete_ptr(POLICYQUALINFO, (a),(b))
	#define sk_POLICYQUALINFO_insert(a,b,c) SKM_sk_insert(POLICYQUALINFO, (a),(b),(c))
	#define sk_POLICYQUALINFO_set_cmp_func(a,b) SKM_sk_set_cmp_func(POLICYQUALINFO, (a),(b))
	#define sk_POLICYQUALINFO_dup(a) SKM_sk_dup(POLICYQUALINFO, a)
	#define sk_POLICYQUALINFO_pop_free(a,b) SKM_sk_pop_free(POLICYQUALINFO, (a),(b))
	#define sk_POLICYQUALINFO_shift(a) SKM_sk_shift(POLICYQUALINFO, (a))
	#define sk_POLICYQUALINFO_pop(a) SKM_sk_pop(POLICYQUALINFO, (a))
	#define sk_POLICYQUALINFO_sort(a) SKM_sk_sort(POLICYQUALINFO, (a))

	#define sk_POLICYINFO_new(a) SKM_sk_new(POLICYINFO, (a))
	#define sk_POLICYINFO_new_null() SKM_sk_new_null(POLICYINFO)
	#define sk_POLICYINFO_free(a) SKM_sk_free(POLICYINFO, (a))
	#define sk_POLICYINFO_num(a) SKM_sk_num(POLICYINFO, (a))
	#define sk_POLICYINFO_value(a,b) SKM_sk_value(POLICYINFO, (a), (b))
	#define sk_POLICYINFO_set(a,b,c) SKM_sk_set(POLICYINFO, (a), (b), (c))
	#define sk_POLICYINFO_zero(a) SKM_sk_zero(POLICYINFO, (a))
	#define sk_POLICYINFO_push(a,b) SKM_sk_push(POLICYINFO, (a),(b))
	#define sk_POLICYINFO_unshift(a,b) SKM_sk_unshift(POLICYINFO, (a),(b))
	#define sk_POLICYINFO_find(a,b) SKM_sk_find(POLICYINFO, (a), (b))
	#define sk_POLICYINFO_delete(a,b) SKM_sk_delete(POLICYINFO, (a),(b))
	#define sk_POLICYINFO_delete_ptr(a,b) SKM_sk_delete_ptr(POLICYINFO, (a),(b))
	#define sk_POLICYINFO_insert(a,b,c) SKM_sk_insert(POLICYINFO, (a),(b),(c))
	#define sk_POLICYINFO_set_cmp_func(a,b) SKM_sk_set_cmp_func(POLICYINFO, (a),(b))
	#define sk_POLICYINFO_dup(a) SKM_sk_dup(POLICYINFO, a)
	#define sk_POLICYINFO_pop_free(a,b) SKM_sk_pop_free(POLICYINFO, (a),(b))
	#define sk_POLICYINFO_shift(a) SKM_sk_shift(POLICYINFO, (a))
	#define sk_POLICYINFO_pop(a) SKM_sk_pop(POLICYINFO, (a))
	#define sk_POLICYINFO_sort(a) SKM_sk_sort(POLICYINFO, (a))

	#define sk_X509_PURPOSE_new(a) SKM_sk_new(X509_PURPOSE, (a))
	#define sk_X509_PURPOSE_new_null() SKM_sk_new_null(X509_PURPOSE)
	#define sk_X509_PURPOSE_free(a) SKM_sk_free(X509_PURPOSE, (a))
	#define sk_X509_PURPOSE_num(a) SKM_sk_num(X509_PURPOSE, (a))
	#define sk_X509_PURPOSE_value(a,b) SKM_sk_value(X509_PURPOSE, (a), (b))
	#define sk_X509_PURPOSE_set(a,b,c) SKM_sk_set(X509_PURPOSE, (a), (b), (c))
	#define sk_X509_PURPOSE_zero(a) SKM_sk_zero(X509_PURPOSE, (a))
	#define sk_X509_PURPOSE_push(a,b) SKM_sk_push(X509_PURPOSE, (a),(b))
	#define sk_X509_PURPOSE_unshift(a,b) SKM_sk_unshift(X509_PURPOSE, (a),(b))
	#define sk_X509_PURPOSE_find(a,b) SKM_sk_find(X509_PURPOSE, (a), (b))
	#define sk_X509_PURPOSE_delete(a,b) SKM_sk_delete(X509_PURPOSE, (a),(b))
	#define sk_X509_PURPOSE_delete_ptr(a,b) SKM_sk_delete_ptr(X509_PURPOSE, (a),(b))
	#define sk_X509_PURPOSE_insert(a,b,c) SKM_sk_insert(X509_PURPOSE, (a),(b),(c))
	#define sk_X509_PURPOSE_set_cmp_func(a,b) SKM_sk_set_cmp_func(X509_PURPOSE, (a),(b))
	#define sk_X509_PURPOSE_dup(a) SKM_sk_dup(X509_PURPOSE, a)
	#define sk_X509_PURPOSE_pop_free(a,b) SKM_sk_pop_free(X509_PURPOSE, (a),(b))
	#define sk_X509_PURPOSE_shift(a) SKM_sk_shift(X509_PURPOSE, (a))
	#define sk_X509_PURPOSE_pop(a) SKM_sk_pop(X509_PURPOSE, (a))
	#define sk_X509_PURPOSE_sort(a) SKM_sk_sort(X509_PURPOSE, (a))

	#define sk_SSL_CIPHER_new(a) SKM_sk_new(SSL_CIPHER, (a))
	#define sk_SSL_CIPHER_new_null() SKM_sk_new_null(SSL_CIPHER)
	#define sk_SSL_CIPHER_free(a) SKM_sk_free(SSL_CIPHER, (a))
	#define sk_SSL_CIPHER_num(a) SKM_sk_num(SSL_CIPHER, (a))
	#define sk_SSL_CIPHER_value(a,b) SKM_sk_value(SSL_CIPHER, (a), (b))
	#define sk_SSL_CIPHER_set(a,b,c) SKM_sk_set(SSL_CIPHER, (a), (b), (c))
	#define sk_SSL_CIPHER_zero(a) SKM_sk_zero(SSL_CIPHER, (a))
	#define sk_SSL_CIPHER_push(a,b) SKM_sk_push(SSL_CIPHER, (a),(b))
	#define sk_SSL_CIPHER_unshift(a,b) SKM_sk_unshift(SSL_CIPHER, (a),(b))
	#define sk_SSL_CIPHER_find(a,b) SKM_sk_find(SSL_CIPHER, (a), (b))
	#define sk_SSL_CIPHER_delete(a,b) SKM_sk_delete(SSL_CIPHER, (a),(b))
	#define sk_SSL_CIPHER_delete_ptr(a,b) SKM_sk_delete_ptr(SSL_CIPHER, (a),(b))
	#define sk_SSL_CIPHER_insert(a,b,c) SKM_sk_insert(SSL_CIPHER, (a),(b),(c))
	#define sk_SSL_CIPHER_set_cmp_func(a,b) SKM_sk_set_cmp_func(SSL_CIPHER, (a),(b))
	#define sk_SSL_CIPHER_dup(a) SKM_sk_dup(SSL_CIPHER, a)
	#define sk_SSL_CIPHER_pop_free(a,b) SKM_sk_pop_free(SSL_CIPHER, (a),(b))
	#define sk_SSL_CIPHER_shift(a) SKM_sk_shift(SSL_CIPHER, (a))
	#define sk_SSL_CIPHER_pop(a) SKM_sk_pop(SSL_CIPHER, (a))
	#define sk_SSL_CIPHER_sort(a) SKM_sk_sort(SSL_CIPHER, (a))

	#define sk_SSL_COMP_new(a) SKM_sk_new(SSL_COMP, (a))
	#define sk_SSL_COMP_new_null() SKM_sk_new_null(SSL_COMP)
	#define sk_SSL_COMP_free(a) SKM_sk_free(SSL_COMP, (a))
	#define sk_SSL_COMP_num(a) SKM_sk_num(SSL_COMP, (a))
	#define sk_SSL_COMP_value(a,b) SKM_sk_value(SSL_COMP, (a), (b))
	#define sk_SSL_COMP_set(a,b,c) SKM_sk_set(SSL_COMP, (a), (b), (c))
	#define sk_SSL_COMP_zero(a) SKM_sk_zero(SSL_COMP, (a))
	#define sk_SSL_COMP_push(a,b) SKM_sk_push(SSL_COMP, (a),(b))
	#define sk_SSL_COMP_unshift(a,b) SKM_sk_unshift(SSL_COMP, (a),(b))
	#define sk_SSL_COMP_find(a,b) SKM_sk_find(SSL_COMP, (a), (b))
	#define sk_SSL_COMP_delete(a,b) SKM_sk_delete(SSL_COMP, (a),(b))
	#define sk_SSL_COMP_delete_ptr(a,b) SKM_sk_delete_ptr(SSL_COMP, (a),(b))
	#define sk_SSL_COMP_insert(a,b,c) SKM_sk_insert(SSL_COMP, (a),(b),(c))
	#define sk_SSL_COMP_set_cmp_func(a,b) SKM_sk_set_cmp_func(SSL_COMP, (a),(b))
	#define sk_SSL_COMP_dup(a) SKM_sk_dup(SSL_COMP, a)
	#define sk_SSL_COMP_pop_free(a,b) SKM_sk_pop_free(SSL_COMP, (a),(b))
	#define sk_SSL_COMP_shift(a) SKM_sk_shift(SSL_COMP, (a))
	#define sk_SSL_COMP_pop(a) SKM_sk_pop(SSL_COMP, (a))
	#define sk_SSL_COMP_sort(a) SKM_sk_sort(SSL_COMP, (a))

/* End of perl script block, you may now edit :-) */

#endif /* ndef HEADER_SAFESTACK_H */
