#
# test/Makefile.ssl
#

DIR=		test
TOP=		..
CC=		cc
INCLUDES=	-I$(TOP) -I../include $(KRB5_INCLUDES)
CFLAG=		-g
INSTALL_PREFIX=
OPENSSLDIR=     /usr/local/ssl
INSTALLTOP=	/usr/local/ssl
MAKEFILE=	Makefile.ssl
NEWMAKE=	make
MAKE=		$(NEWMAKE) -f $(MAKEFILE)
MAKEDEPPROG=	makedepend
MAKEDEPEND=	$(TOP)/util/domd $(TOP) -MD $(MAKEDEPPROG)
PERL=		perl
# KRB5 stuff
KRB5_INCLUDES=
LIBKRB5=

PEX_LIBS=
EX_LIBS= #-lnsl -lsocket

CFLAGS= $(INCLUDES) $(CFLAG)

GENERAL=Makefile.ssl maketests.com \
	tests.com testenc.com tx509.com trsa.com tcrl.com tsid.com treq.com \
	tpkcs7.com tpkcs7d.com tverify.com testgen.com testss.com testssl.com \
	testca.com VMSca-response.1 VMSca-response.2

DLIBCRYPTO= ../libcrypto.a
DLIBSSL= ../libssl.a
LIBCRYPTO= -L.. -lcrypto
LIBSSL= -L.. -lssl

BNTEST=		bntest
ECTEST=		ectest
ECDSATEST=	ecdsatest
ECDHTEST=	ecdhtest
EXPTEST=	exptest
IDEATEST=	ideatest
SHATEST=	shatest
SHA1TEST=	sha1test
MDC2TEST=	mdc2test
RMDTEST=	rmdtest
MD2TEST=	md2test
MD4TEST=	md4test
MD5TEST=	md5test
HMACTEST=	hmactest
RC2TEST=	rc2test
RC4TEST=	rc4test
RC5TEST=	rc5test
BFTEST=		bftest
CASTTEST=	casttest
DESTEST=	destest
RANDTEST=	randtest
DHTEST=		dhtest
DSATEST=	dsatest
METHTEST=	methtest
SSLTEST=	ssltest
RSATEST=	rsa_test
ENGINETEST=	enginetest
EVPTEST=	evp_test

TESTS=		alltests

EXE=	$(BNTEST) $(ECTEST)  $(ECDSATEST) $(ECDHTEST) $(IDEATEST) \
	$(MD2TEST)  $(MD4TEST) $(MD5TEST) $(HMACTEST) \
	$(RC2TEST) $(RC4TEST) $(RC5TEST) \
	$(DESTEST) $(SHATEST) $(SHA1TEST) $(MDC2TEST) $(RMDTEST) \
	$(RANDTEST) $(DHTEST) $(ENGINETEST) \
	$(BFTEST) $(CASTTEST) $(SSLTEST) $(EXPTEST) $(DSATEST) $(RSATEST) \
	$(EVPTEST)

# $(METHTEST)

OBJ=	$(BNTEST).o $(ECTEST).o  $(ECDSATEST).o $(ECDHTEST).o $(IDEATEST).o \
	$(MD2TEST).o $(MD4TEST).o $(MD5TEST).o \
	$(HMACTEST).o \
	$(RC2TEST).o $(RC4TEST).o $(RC5TEST).o \
	$(DESTEST).o $(SHATEST).o $(SHA1TEST).o $(MDC2TEST).o $(RMDTEST).o \
	$(RANDTEST).o $(DHTEST).o $(ENGINETEST).o $(CASTTEST).o \
	$(BFTEST).o  $(SSLTEST).o  $(DSATEST).o  $(EXPTEST).o $(RSATEST).o \
	$(EVPTEST).o
SRC=	$(BNTEST).c $(ECTEST).c  $(ECDSATEST).c $(ECDHTEST).c $(IDEATEST).c \
	$(MD2TEST).c  $(MD4TEST).c $(MD5TEST).c \
	$(HMACTEST).c \
	$(RC2TEST).c $(RC4TEST).c $(RC5TEST).c \
	$(DESTEST).c $(SHATEST).c $(SHA1TEST).c $(MDC2TEST).c $(RMDTEST).c \
	$(RANDTEST).c $(DHTEST).c $(ENGINETEST).c $(CASTTEST).c \
	$(BFTEST).c  $(SSLTEST).c $(DSATEST).c   $(EXPTEST).c $(RSATEST).c \
	$(EVPTEST).c

EXHEADER= 
HEADER=	$(EXHEADER)

ALL=    $(GENERAL) $(SRC) $(HEADER)

top:
	(cd ..; $(MAKE) DIRS=$(DIR) TESTS=$(TESTS) all)

all:	exe

exe:	$(EXE) dummytest

files:
	$(PERL) $(TOP)/util/files.pl Makefile.ssl >> $(TOP)/MINFO

links:
	@sh $(TOP)/util/point.sh Makefile.ssl Makefile

generate: $(SRC)
$(SRC):
	@sh $(TOP)/util/point.sh dummytest.c $@

errors:

install:

tags:
	ctags $(SRC)

tests:	exe apps $(TESTS)

apps:
	@(cd ..; $(MAKE) DIRS=apps all)

SET_SO_PATHS=OSSL_LIBPATH="`cd ..; pwd`"; \
		LD_LIBRARY_PATH="$$OSSL_LIBPATH:$$LD_LIBRARY_PATH"; \
		DYLD_LIBRARY_PATH="$$OSSL_LIBPATH:$$DYLD_LIBRARY_PATH"; \
		SHLIB_PATH="$$OSSL_LIBPATH:$$SHLIB_PATH"; \
		LIBPATH="$$OSSL_LIBPATH:$$LIBPATH"; \
		if [ "$(PLATFORM)" = "Cygwin" ]; then PATH="$${LIBPATH}:$$PATH"; fi; \
		export LD_LIBRARY_PATH DYLD_LIBRARY_PATH SHLIB_PATH LIBPATH PATH

alltests: \
	test_des test_idea test_sha test_md4 test_md5 test_hmac \
	test_md2 test_mdc2 \
	test_rmd test_rc2 test_rc4 test_rc5 test_bf test_cast test_aes \
	test_rand test_bn test_ec test_ecdsa test_ecdh \
	test_enc test_x509 test_rsa test_crl test_sid \
	test_gen test_req test_pkcs7 test_verify test_dh test_dsa \
	test_ss test_ca test_engine test_evp test_ssl

test_evp:
	$(SET_SO_PATHS); ./$(EVPTEST) evptests.txt

test_des:
	$(SET_SO_PATHS); ./$(DESTEST)

test_idea:
	$(SET_SO_PATHS); ./$(IDEATEST)

test_sha:
	$(SET_SO_PATHS); ./$(SHATEST)
	$(SET_SO_PATHS); ./$(SHA1TEST)

test_mdc2:
	$(SET_SO_PATHS); ./$(MDC2TEST)

test_md5:
	$(SET_SO_PATHS); ./$(MD5TEST)

test_md4:
	$(SET_SO_PATHS); ./$(MD4TEST)

test_hmac:
	$(SET_SO_PATHS); ./$(HMACTEST)

test_md2:
	$(SET_SO_PATHS); ./$(MD2TEST)

test_rmd:
	$(SET_SO_PATHS); ./$(RMDTEST)

test_bf:
	$(SET_SO_PATHS); ./$(BFTEST)

test_cast:
	$(SET_SO_PATHS); ./$(CASTTEST)

test_rc2:
	$(SET_SO_PATHS); ./$(RC2TEST)

test_rc4:
	$(SET_SO_PATHS); ./$(RC4TEST)

test_rc5:
	$(SET_SO_PATHS); ./$(RC5TEST)

test_rand:
	$(SET_SO_PATHS); ./$(RANDTEST)

test_enc:
	@$(SET_SO_PATHS); sh ./testenc

test_x509:
	echo test normal x509v1 certificate
	$(SET_SO_PATHS); sh ./tx509 2>/dev/null
	echo test first x509v3 certificate
	$(SET_SO_PATHS); sh ./tx509 v3-cert1.pem 2>/dev/null
	echo test second x509v3 certificate
	$(SET_SO_PATHS); sh ./tx509 v3-cert2.pem 2>/dev/null

test_rsa:
	@$(SET_SO_PATHS); sh ./trsa 2>/dev/null
	$(SET_SO_PATHS); ./$(RSATEST)

test_crl:
	@$(SET_SO_PATHS); sh ./tcrl 2>/dev/null

test_sid:
	@$(SET_SO_PATHS); sh ./tsid 2>/dev/null

test_req:
	@$(SET_SO_PATHS); sh ./treq 2>/dev/null
	@$(SET_SO_PATHS); sh ./treq testreq2.pem 2>/dev/null

test_pkcs7:
	@$(SET_SO_PATHS); sh ./tpkcs7 2>/dev/null
	@$(SET_SO_PATHS); sh ./tpkcs7d 2>/dev/null

test_bn:
	@echo starting big number library test, could take a while...
	@$(SET_SO_PATHS); ./$(BNTEST) >tmp.bntest
	@echo quit >>tmp.bntest
	@echo "running bc"
	@<tmp.bntest sh -c "`sh ./bctest ignore`" | $(PERL) -e '$$i=0; while (<STDIN>) {if (/^test (.*)/) {print STDERR "\nverify $$1";} elsif (!/^0$$/) {die "\nFailed! bc: $$_";} else {print STDERR "."; $$i++;}} print STDERR "\n$$i tests passed\n"'
	@echo 'test a^b%c implementations'
	$(SET_SO_PATHS); ./$(EXPTEST)

test_ec:
	@echo 'test elliptic curves'
	$(SET_SO_PATHS); ./$(ECTEST)

test_ecdsa:
	@echo 'test ecdsa'
	$(SET_SO_PATHS); ./$(ECDSATEST)

test_ecdh:
	@echo 'test ecdh'
	$(SET_SO_PATHS); ./$(ECDHTEST)

test_verify:
	@echo "The following command should have some OK's and some failures"
	@echo "There are definitly a few expired certificates"
	$(SET_SO_PATHS); ../apps/openssl verify -CApath ../certs ../certs/*.pem

test_dh:
	@echo "Generate a set of DH parameters"
	$(SET_SO_PATHS); ./$(DHTEST)

test_dsa:
	@echo "Generate a set of DSA parameters"
	$(SET_SO_PATHS); ./$(DSATEST)
	$(SET_SO_PATHS); ./$(DSATEST) -app2_1

test_gen:
	@echo "Generate and verify a certificate request"
	@$(SET_SO_PATHS); sh ./testgen

test_ss keyU.ss certU.ss certCA.ss: testss
	@echo "Generate and certify a test certificate"
	@$(SET_SO_PATHS); sh ./testss

test_engine: 
	@echo "Manipulate the ENGINE structures"
	$(SET_SO_PATHS); ./$(ENGINETEST)

test_ssl: keyU.ss certU.ss certCA.ss
	@echo "test SSL protocol"
	@$(SET_SO_PATHS); sh ./testssl keyU.ss certU.ss certCA.ss

test_ca:
	@$(SET_SO_PATHS); if ../apps/openssl no-rsa; then \
	  echo "skipping CA.sh test -- requires RSA"; \
	else \
	  echo "Generate and certify a test certificate via the 'ca' program"; \
	  sh ./testca; \
 	fi

test_aes: #$(AESTEST)
#	@echo "test Rijndael"
#	$(SET_SO_PATHS); ./$(AESTEST)

lint:
	lint -DLINT $(INCLUDES) $(SRC)>fluff

depend:
	$(MAKEDEPEND) -- $(CFLAG) $(INCLUDES) $(DEPFLAG) -- $(PROGS) $(SRC)

dclean:
	$(PERL) -pe 'if (/^# DO NOT DELETE THIS LINE/) {print; exit(0);}' $(MAKEFILE) >Makefile.new
	mv -f Makefile.new $(MAKEFILE)

clean:
	rm -f .rnd tmp.bntest tmp.bctest *.o *.obj lib tags core .pure .nfs* *.old *.bak fluff $(EXE) *.ss *.srl log

$(DLIBSSL):
	(cd ..; $(MAKE) DIRS=ssl all)

$(DLIBCRYPTO):
	(cd ..; $(MAKE) DIRS=crypto all)

$(RSATEST): $(RSATEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(RSATEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(RSATEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(BNTEST): $(BNTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(BNTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(BNTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(ECTEST): $(ECTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(ECTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(ECTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(EXPTEST): $(EXPTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(EXPTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(EXPTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(IDEATEST): $(IDEATEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(IDEATEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(IDEATEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(MD2TEST): $(MD2TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(MD2TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(MD2TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(SHATEST): $(SHATEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(SHATEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(SHATEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(SHA1TEST): $(SHA1TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(SHA1TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(SHA1TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(RMDTEST): $(RMDTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(RMDTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(RMDTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(MDC2TEST): $(MDC2TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(MDC2TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(MDC2TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(MD4TEST): $(MD4TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(MD4TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(MD4TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(MD5TEST): $(MD5TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(MD5TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(MD5TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(HMACTEST): $(HMACTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(HMACTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(HMACTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(RC2TEST): $(RC2TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(RC2TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(RC2TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(BFTEST): $(BFTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(BFTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(BFTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(CASTTEST): $(CASTTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(CASTTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(CASTTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(RC4TEST): $(RC4TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(RC4TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(RC4TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(RC5TEST): $(RC5TEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(RC5TEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(RC5TEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(DESTEST): $(DESTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(DESTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(DESTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(RANDTEST): $(RANDTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(RANDTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(RANDTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(DHTEST): $(DHTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(DHTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(DHTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(DSATEST): $(DSATEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(DSATEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(DSATEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(METHTEST): $(METHTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(METHTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(METHTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(SSLTEST): $(SSLTEST).o $(DLIBSSL) $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBSSL) $(LIBKRB5) $(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBSSL) $(LIBKRB5) $(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(SSLTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(SSLTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(ENGINETEST): $(ENGINETEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(ENGINETEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(ENGINETEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(EVPTEST): $(EVPTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(EVPTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(EVPTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(ECDSATEST): $(ECDSATEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(ECDSATEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(ECDSATEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

$(ECDHTEST): $(ECDHTEST).o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=$(ECDHTEST) LDFLAGS="$(CFLAGS)" \
		OBJECTS="$(ECDHTEST).o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

#$(AESTEST).o: $(AESTEST).c
#	$(CC) -c $(CFLAGS) -DINTERMEDIATE_VALUE_KAT -DTRACE_KAT_MCT $(AESTEST).c

#$(AESTEST): $(AESTEST).o $(DLIBCRYPTO)
#	if [ "$(SHLIB_TARGET)" = "hpux-shared" -o "$(SHLIB_TARGET)" = "darwin-shared" ] ; then \
#	  $(CC) -o $(AESTEST) $(CFLAGS) $(AESTEST).o $(PEX_LIBS) $(DLIBCRYPTO) $(EX_LIBS) ; \
#	else \
#	  $(CC) -o $(AESTEST) $(CFLAGS) $(AESTEST).o $(PEX_LIBS) $(LIBCRYPTO) $(EX_LIBS) ; \
#	fi

dummytest: dummytest.o $(DLIBCRYPTO)
	shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
		shlib_target="$(SHLIB_TARGET)"; \
	fi; \
	if [ "$${shlib_target}" = "hpux-shared" -o "$${shlib_target}" = "darwin-shared" ] ; then \
	  LIBRARIES="$(DLIBCRYPTO)"; \
	else \
	  LIBRARIES="$(LIBCRYPTO)"; \
	fi; \
	$(NEWMAKE) -f $(TOP)/Makefile.shared \
		APPNAME=dummytest LDFLAGS="$(CFLAGS)" \
		OBJECTS="dummytest.o" \
		LIBDEPS="$(PEX_LIBS) $$LIBRARIES $(EX_LIBS)" \
		LIBRPATH=$(INSTALLTOP)/lib \
		link_app.$${shlib_target}

# DO NOT DELETE THIS LINE -- make depend depends on it.

bftest.o: ../e_os.h ../include/openssl/blowfish.h ../include/openssl/e_os2.h
bftest.o: ../include/openssl/opensslconf.h bftest.c
bntest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
bntest.o: ../include/openssl/bn.h ../include/openssl/buffer.h
bntest.o: ../include/openssl/crypto.h ../include/openssl/dh.h
bntest.o: ../include/openssl/dsa.h ../include/openssl/e_os2.h
bntest.o: ../include/openssl/ec.h ../include/openssl/ecdh.h
bntest.o: ../include/openssl/ecdsa.h ../include/openssl/err.h
bntest.o: ../include/openssl/evp.h ../include/openssl/lhash.h
bntest.o: ../include/openssl/obj_mac.h ../include/openssl/objects.h
bntest.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
bntest.o: ../include/openssl/ossl_typ.h ../include/openssl/pkcs7.h
bntest.o: ../include/openssl/rand.h ../include/openssl/rsa.h
bntest.o: ../include/openssl/safestack.h ../include/openssl/sha.h
bntest.o: ../include/openssl/stack.h ../include/openssl/symhacks.h
bntest.o: ../include/openssl/x509.h ../include/openssl/x509_vfy.h bntest.c
casttest.o: ../e_os.h ../include/openssl/cast.h ../include/openssl/e_os2.h
casttest.o: ../include/openssl/opensslconf.h casttest.c
destest.o: ../include/openssl/des.h ../include/openssl/des_old.h
destest.o: ../include/openssl/e_os2.h ../include/openssl/opensslconf.h
destest.o: ../include/openssl/ossl_typ.h ../include/openssl/safestack.h
destest.o: ../include/openssl/stack.h ../include/openssl/symhacks.h
destest.o: ../include/openssl/ui.h ../include/openssl/ui_compat.h destest.c
dhtest.o: ../e_os.h ../include/openssl/bio.h ../include/openssl/bn.h
dhtest.o: ../include/openssl/crypto.h ../include/openssl/dh.h
dhtest.o: ../include/openssl/e_os2.h ../include/openssl/err.h
dhtest.o: ../include/openssl/lhash.h ../include/openssl/opensslconf.h
dhtest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
dhtest.o: ../include/openssl/rand.h ../include/openssl/safestack.h
dhtest.o: ../include/openssl/stack.h ../include/openssl/symhacks.h dhtest.c
dsatest.o: ../e_os.h ../include/openssl/bio.h ../include/openssl/bn.h
dsatest.o: ../include/openssl/crypto.h ../include/openssl/dh.h
dsatest.o: ../include/openssl/dsa.h ../include/openssl/e_os2.h
dsatest.o: ../include/openssl/err.h ../include/openssl/lhash.h
dsatest.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
dsatest.o: ../include/openssl/ossl_typ.h ../include/openssl/rand.h
dsatest.o: ../include/openssl/safestack.h ../include/openssl/stack.h
dsatest.o: ../include/openssl/symhacks.h dsatest.c
ecdhtest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
ecdhtest.o: ../include/openssl/bn.h ../include/openssl/crypto.h
ecdhtest.o: ../include/openssl/e_os2.h ../include/openssl/ec.h
ecdhtest.o: ../include/openssl/ecdh.h ../include/openssl/err.h
ecdhtest.o: ../include/openssl/lhash.h ../include/openssl/obj_mac.h
ecdhtest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
ecdhtest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
ecdhtest.o: ../include/openssl/rand.h ../include/openssl/safestack.h
ecdhtest.o: ../include/openssl/sha.h ../include/openssl/stack.h
ecdhtest.o: ../include/openssl/symhacks.h ecdhtest.c
ecdsatest.o: ../include/openssl/asn1.h ../include/openssl/bio.h
ecdsatest.o: ../include/openssl/bn.h ../include/openssl/buffer.h
ecdsatest.o: ../include/openssl/crypto.h ../include/openssl/dh.h
ecdsatest.o: ../include/openssl/dsa.h ../include/openssl/e_os2.h
ecdsatest.o: ../include/openssl/ec.h ../include/openssl/ecdh.h
ecdsatest.o: ../include/openssl/ecdsa.h ../include/openssl/engine.h
ecdsatest.o: ../include/openssl/err.h ../include/openssl/evp.h
ecdsatest.o: ../include/openssl/lhash.h ../include/openssl/obj_mac.h
ecdsatest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
ecdsatest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
ecdsatest.o: ../include/openssl/pkcs7.h ../include/openssl/rand.h
ecdsatest.o: ../include/openssl/rsa.h ../include/openssl/safestack.h
ecdsatest.o: ../include/openssl/sha.h ../include/openssl/stack.h
ecdsatest.o: ../include/openssl/store.h ../include/openssl/symhacks.h
ecdsatest.o: ../include/openssl/ui.h ../include/openssl/x509.h
ecdsatest.o: ../include/openssl/x509_vfy.h ecdsatest.c
ectest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
ectest.o: ../include/openssl/bn.h ../include/openssl/crypto.h
ectest.o: ../include/openssl/e_os2.h ../include/openssl/ec.h
ectest.o: ../include/openssl/engine.h ../include/openssl/err.h
ectest.o: ../include/openssl/lhash.h ../include/openssl/obj_mac.h
ectest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
ectest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
ectest.o: ../include/openssl/rand.h ../include/openssl/safestack.h
ectest.o: ../include/openssl/stack.h ../include/openssl/symhacks.h ectest.c
enginetest.o: ../include/openssl/bio.h ../include/openssl/buffer.h
enginetest.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
enginetest.o: ../include/openssl/engine.h ../include/openssl/err.h
enginetest.o: ../include/openssl/lhash.h ../include/openssl/opensslconf.h
enginetest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
enginetest.o: ../include/openssl/safestack.h ../include/openssl/stack.h
enginetest.o: ../include/openssl/symhacks.h enginetest.c
evp_test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
evp_test.o: ../include/openssl/conf.h ../include/openssl/crypto.h
evp_test.o: ../include/openssl/e_os2.h ../include/openssl/engine.h
evp_test.o: ../include/openssl/err.h ../include/openssl/evp.h
evp_test.o: ../include/openssl/lhash.h ../include/openssl/obj_mac.h
evp_test.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
evp_test.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
evp_test.o: ../include/openssl/safestack.h ../include/openssl/stack.h
evp_test.o: ../include/openssl/symhacks.h evp_test.c
exptest.o: ../e_os.h ../include/openssl/bio.h ../include/openssl/bn.h
exptest.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
exptest.o: ../include/openssl/err.h ../include/openssl/lhash.h
exptest.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
exptest.o: ../include/openssl/ossl_typ.h ../include/openssl/rand.h
exptest.o: ../include/openssl/safestack.h ../include/openssl/stack.h
exptest.o: ../include/openssl/symhacks.h exptest.c
hmactest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
hmactest.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
hmactest.o: ../include/openssl/evp.h ../include/openssl/hmac.h
hmactest.o: ../include/openssl/md5.h ../include/openssl/obj_mac.h
hmactest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
hmactest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
hmactest.o: ../include/openssl/safestack.h ../include/openssl/stack.h
hmactest.o: ../include/openssl/symhacks.h hmactest.c
ideatest.o: ../e_os.h ../include/openssl/e_os2.h ../include/openssl/idea.h
ideatest.o: ../include/openssl/opensslconf.h ideatest.c
md2test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
md2test.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
md2test.o: ../include/openssl/evp.h ../include/openssl/md2.h
md2test.o: ../include/openssl/obj_mac.h ../include/openssl/objects.h
md2test.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
md2test.o: ../include/openssl/ossl_typ.h ../include/openssl/safestack.h
md2test.o: ../include/openssl/stack.h ../include/openssl/symhacks.h md2test.c
md4test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
md4test.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
md4test.o: ../include/openssl/evp.h ../include/openssl/md4.h
md4test.o: ../include/openssl/obj_mac.h ../include/openssl/objects.h
md4test.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
md4test.o: ../include/openssl/ossl_typ.h ../include/openssl/safestack.h
md4test.o: ../include/openssl/stack.h ../include/openssl/symhacks.h md4test.c
md5test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
md5test.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
md5test.o: ../include/openssl/evp.h ../include/openssl/md5.h
md5test.o: ../include/openssl/obj_mac.h ../include/openssl/objects.h
md5test.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
md5test.o: ../include/openssl/ossl_typ.h ../include/openssl/safestack.h
md5test.o: ../include/openssl/stack.h ../include/openssl/symhacks.h md5test.c
mdc2test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
mdc2test.o: ../include/openssl/crypto.h ../include/openssl/des.h
mdc2test.o: ../include/openssl/des_old.h ../include/openssl/e_os2.h
mdc2test.o: ../include/openssl/evp.h ../include/openssl/mdc2.h
mdc2test.o: ../include/openssl/obj_mac.h ../include/openssl/objects.h
mdc2test.o: ../include/openssl/opensslconf.h ../include/openssl/opensslv.h
mdc2test.o: ../include/openssl/ossl_typ.h ../include/openssl/safestack.h
mdc2test.o: ../include/openssl/stack.h ../include/openssl/symhacks.h
mdc2test.o: ../include/openssl/ui.h ../include/openssl/ui_compat.h mdc2test.c
randtest.o: ../e_os.h ../include/openssl/e_os2.h
randtest.o: ../include/openssl/opensslconf.h ../include/openssl/ossl_typ.h
randtest.o: ../include/openssl/rand.h randtest.c
rc2test.o: ../e_os.h ../include/openssl/e_os2.h
rc2test.o: ../include/openssl/opensslconf.h ../include/openssl/rc2.h rc2test.c
rc4test.o: ../e_os.h ../include/openssl/e_os2.h
rc4test.o: ../include/openssl/opensslconf.h ../include/openssl/rc4.h rc4test.c
rc5test.o: ../e_os.h ../include/openssl/e_os2.h
rc5test.o: ../include/openssl/opensslconf.h ../include/openssl/rc5.h rc5test.c
rmdtest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
rmdtest.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
rmdtest.o: ../include/openssl/evp.h ../include/openssl/obj_mac.h
rmdtest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
rmdtest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
rmdtest.o: ../include/openssl/ripemd.h ../include/openssl/safestack.h
rmdtest.o: ../include/openssl/stack.h ../include/openssl/symhacks.h rmdtest.c
rsa_test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
rsa_test.o: ../include/openssl/bn.h ../include/openssl/crypto.h
rsa_test.o: ../include/openssl/e_os2.h ../include/openssl/err.h
rsa_test.o: ../include/openssl/lhash.h ../include/openssl/opensslconf.h
rsa_test.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
rsa_test.o: ../include/openssl/rand.h ../include/openssl/rsa.h
rsa_test.o: ../include/openssl/safestack.h ../include/openssl/stack.h
rsa_test.o: ../include/openssl/symhacks.h rsa_test.c
sha1test.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
sha1test.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
sha1test.o: ../include/openssl/evp.h ../include/openssl/obj_mac.h
sha1test.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
sha1test.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
sha1test.o: ../include/openssl/safestack.h ../include/openssl/sha.h
sha1test.o: ../include/openssl/stack.h ../include/openssl/symhacks.h sha1test.c
shatest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
shatest.o: ../include/openssl/crypto.h ../include/openssl/e_os2.h
shatest.o: ../include/openssl/evp.h ../include/openssl/obj_mac.h
shatest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
shatest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
shatest.o: ../include/openssl/safestack.h ../include/openssl/sha.h
shatest.o: ../include/openssl/stack.h ../include/openssl/symhacks.h shatest.c
ssltest.o: ../e_os.h ../include/openssl/asn1.h ../include/openssl/bio.h
ssltest.o: ../include/openssl/bn.h ../include/openssl/buffer.h
ssltest.o: ../include/openssl/comp.h ../include/openssl/crypto.h
ssltest.o: ../include/openssl/dh.h ../include/openssl/dsa.h
ssltest.o: ../include/openssl/e_os2.h ../include/openssl/ec.h
ssltest.o: ../include/openssl/ecdh.h ../include/openssl/ecdsa.h
ssltest.o: ../include/openssl/engine.h ../include/openssl/err.h
ssltest.o: ../include/openssl/evp.h ../include/openssl/kssl.h
ssltest.o: ../include/openssl/lhash.h ../include/openssl/obj_mac.h
ssltest.o: ../include/openssl/objects.h ../include/openssl/opensslconf.h
ssltest.o: ../include/openssl/opensslv.h ../include/openssl/ossl_typ.h
ssltest.o: ../include/openssl/pem.h ../include/openssl/pem2.h
ssltest.o: ../include/openssl/pkcs7.h ../include/openssl/rand.h
ssltest.o: ../include/openssl/rsa.h ../include/openssl/safestack.h
ssltest.o: ../include/openssl/sha.h ../include/openssl/ssl.h
ssltest.o: ../include/openssl/ssl2.h ../include/openssl/ssl23.h
ssltest.o: ../include/openssl/ssl3.h ../include/openssl/stack.h
ssltest.o: ../include/openssl/symhacks.h ../include/openssl/tls1.h
ssltest.o: ../include/openssl/x509.h ../include/openssl/x509_vfy.h ssltest.c
